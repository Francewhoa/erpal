<?php
/**
* @file
* Code for the erpal_project billable module.
* ERPAL projects billable adds billable entity after saving timetracking to 
* agil project or task with payment informationto fixed price project
*/

//@todo should not be loaded on every request or posted in hook_init
require_once 'include/task.inc';
require_once 'include/timetracking.inc';
require_once 'include/ajax.inc';

/**
* Implements hook_node_insert
*/
function erpal_projects_billable_node_insert($node) {
  $type = $node->type;

  if ($type == 'erpal_timetracking')
    _erpal_projects_billable_insert_timetracking($node);
 
  if ($type == 'erpal_task')
    _erpal_projects_billable_insert_task($node);
}

/**
* Implements hook_node_insert
*/
function erpal_projects_billable_node_update($node) {
  $type = $node->type;

  if ($type == 'erpal_timetracking')
    _erpal_projects_billable_update_timetracking($node);
 
  if ($type == 'erpal_task')
    _erpal_projects_billable_update_task($node);
}

/**
* Implements hook_element_info_alter
*/
function erpal_projects_billable_element_info_alter(&$type) {

  _erpal_projects_billable_element_alter_nodereference_url($type);
}

/**
* implements hook_form_alter
*/
function erpal_projects_billable_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'erpal_task_node_form') {
    $nid = $form['nid']['#value'];
    if (!$nid) { //only alter the form fields if the node will be created, not at update
      if (count($form_state['input']) <= 0 || isset($form_state['triggering_element'])) {
        //if we dont do that if statement, the form will be altered after submission which will lead to 
        //another altering of pricing information, which is bad!
        _erpal_projects_billable_preselect_task_create_form($form, $form_state);     
        
      }
    }
    
    _erpal_projects_billable_prepare_ajax_pricing_preselect($form, $form_state);
  }  
}

/**
* Adds ajax handler to project ref field to preselect pricing information
* if a task is created NOT BY using the reference by url widget
*/
function _erpal_projects_billable_prepare_ajax_pricing_preselect(&$form, $form_state) {
  $form['field_pricing'][LANGUAGE_NONE][0]['#prefix'] = '<div id="pricing_wrapper">';
  $form['field_pricing'][LANGUAGE_NONE][0]['#suffix'] = '</div>';
  $form['field_project_ref'][LANGUAGE_NONE][0]['nid']['#ajax'] = array(
    'callback' => '_erpal_projects_billable_ajax_pricing_preselect_callback',
    'wrapper' => 'pricing_wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );
}

/**
* preselects the task node form with pricing information from the referenced project (if one is referenced)
*/
function _erpal_projects_billable_preselect_task_create_form(&$form, $form_state) {

  $project_nid = $form['field_project_ref'][LANGUAGE_NONE][0]['nid']['#default_value'];
 
  //perhaps, there is a project_nid in form_state, we can use that because it has been submitted by ajax!
  if (!empty($form_state['values']['field_project_ref']))
    $project_nid = $form_state['values']['field_project_ref'][LANGUAGE_NONE][0]['nid'];

  if (!$project_nid)
    return; //if we dont have a project, we dont have data to preselect the task price fields with
    
  //we prefill the price mode of the task the same as at the project. If the project has
  //price mode "per_hour" we preselect the price (this is the price per hour).
  $preselects = _erpal_projects_billable_get_task_preselects($project_nid);

  $form['field_pricing'][LANGUAGE_NONE][0]['field_price_mode'][LANGUAGE_NONE]['#value'] = $preselects['price_mode'];
  $form['field_pricing'][LANGUAGE_NONE][0]['field_vat_rate'][LANGUAGE_NONE]['#value'] = $preselects['vat_rate'];
  $form['field_pricing'][LANGUAGE_NONE][0]['field_currency'][LANGUAGE_NONE]['#value'] = $preselects['currency'];
  
  $price = '';
  if ($preselects['price_mode'] == 'per_hour') {
    //Fill the price per hour
    $price = $preselects['price'];
  }
  
  $form['field_pricing'][LANGUAGE_NONE][0]['field_price'][LANGUAGE_NONE][0]['value']['#value'] = $price;
}

/**
* Returns pricing preset values for a task according to its referenced node
*/
function _erpal_projects_billable_get_task_preselects($project_nid) {

  $project_node = node_load($project_nid);
  $preselects = _erpal_projects_billable_get_pricing($project_node);
  
  if ($preselects['price_mode'] == 'fixed_price')  
    $preselects['price_mode'] = 'not_billable'; //in most cases if the project is a fixed price project, the task is not billable
    
  return $preselects;
}


/**
* Creates a new bilable entity
* @param $billabel if set, this billable will be updated, otherwise a new billable will be created
*/
function _erpal_project_billable_save_billable($subject_title, $customer_nid, $subject_nid, $quantity, $single_price, $currency, $vat_rate, $date_delivery, $billable=false) {

  //@todo sollte das besser mit billable_create aus dem modul billable in billable.entity.inc getan werden?
  if (!$billable)
    $billable = new Billable;
  else
    if ($billable->billed)
      return false; //this is already billed so it could not be changed!
    
  $billable->subject = $subject_title;
  $billable->type = 'billable';
  $billable->currency = $currency;
  $billable->billed = false;
  $billable->subject_nid = $subject_nid;
  $billable->quantity = $quantity;
  $billable->single_price = $single_price;
  $billable->vat_rate = $vat_rate;
  $billable->date_delivery = $date_delivery;
  $billable->created = time();
  $billable->changed = time();
  $billable->field_customer_ref[LANGUAGE_NONE][0]['nid'] = $customer_nid;
  entity_save('billable', $billable);
  
  return true;
}


/**
* Function that checks if a given subject is billable
* @param a node as subject
* @return an array with billing information necessary for creating a new billable entiy
*/
function _erpal_projects_billable_subject_billabel_information_subject($node) {

  $type = $node->type;  
  switch ($type) {
    case 'erpal_task': return _erpal_projects_billable_subject_billabel_information_task_subject($node);    
    case 'erpal_timetracking': return _erpal_projects_billable_subject_billabel_information_timetracking_subject($node);  
  }
  
  return array();
}

/**
* returns the billing information of a task
* @param tha task node
* @retur an array with billing information like price mode, price etc
*/
function _erpal_projects_billable_subject_billabel_information_task_subject($node) {

  $pricing = _erpal_projects_billable_get_pricing($node);
  
  $info['price_mode'] = $pricing['price_mode'];
  $info['price'] = $pricing['price'];
  $info['vat_rate'] = $pricing['vat_rate'];
  $info['currency'] = $pricing['currency'];
  
  //add the customer 
  //first get the project
  $project_nid = $node->field_project_ref[LANGUAGE_NONE][0]['nid'];
  $project_node = node_load($project_nid);
  
  //now get customer of project
  $customer_nid = $project_node->field_customer_ref[LANGUAGE_NONE][0]['nid'];
  $customer_node = node_load($customer_nid);
  
  $info['customer'] = false;
  if ($customer_node->nid)
    $info['customer'] = $customer_node;  
    
  return $info;
}

/**
* Return the billing information of the task of the timetracking!
* @param $node the timetracking node
*/
function _erpal_projects_billable_subject_billabel_information_timetracking_subject($node) {
  //get the referenced node first
  
  $subject_nid = $node->field_timetracking_subject[LANGUAGE_NONE][0]['nid'];
  $subject_node = node_load($subject_nid);
  
  return _erpal_projects_billable_subject_billabel_information_task_subject($subject_node);
}

/**
* returns the price mode to an project or task
* @param a project or task node
*/
function _erpal_projects_billable_get_pricing($node) {

  $type = $node->type;
  
  if ($type == 'erpal_project' || $type == 'erpal_task') {
    //get the pricing field collection    
    $pricing_entity_id = $node->field_pricing[LANGUAGE_NONE][0]['value'];

    $pricing_entity = entity_load('field_collection_item', array($pricing_entity_id));  
    $pricing_entity = $pricing_entity[$pricing_entity_id];
    $price_mode = $pricing_entity->field_price_mode[LANGUAGE_NONE][0]['value']; 
    $price = 0;
    if (isset($pricing_entity->field_price[LANGUAGE_NONE]))
      $price = $pricing_entity->field_price[LANGUAGE_NONE][0]['value'];
    
    $currency = 0;
    if (isset($pricing_entity->field_currency[LANGUAGE_NONE]))
      $currency  = $pricing_entity->field_currency[LANGUAGE_NONE][0]['value'];
    
    $vat_rate = 0;
    if (isset($pricing_entity->field_vat_rate[LANGUAGE_NONE]))
      $vat_rate  = $pricing_entity->field_vat_rate[LANGUAGE_NONE][0]['value'];
    
    return array(
      'price_mode' => $price_mode,
      'price' => $price,
      'vat_rate' => $vat_rate,
      'currency' => $currency,
    );
  }
}

/**
* returns all billables to a given subject
*/
function _erpal_projects_billable_billbales_by_subject_nid($subject_nid, $loaded=false) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'billable')
    ->entityCondition('bundle', 'billable')
    ->propertyCondition('subject_nid', $subject_nid, '='); // run the query as user 1
    
  $result = $query->execute();
  
  $ret = array();
  if (isset($result['billable'])) {  
    foreach ($result['billable'] as $id => $obj) {    
      if ($loaded) {
        $billable = entity_load('billable', array($obj->billable_id));
        $ret[$obj->billable_id] = $billable[$obj->billable_id];
      } else
        $ret[$obj->billable_id] = $obj->billable_id;
    }
  }

  return $ret;
}

/**
* Callback function for returnin all available VAT
*/
function erpal_billable_field_vat_rate_allowed_values() {
  return _billable_vat_rates();
}

/**
* Callback function for returnin all available currencies
*/
function erpal_billable_field_currency_allowed_values() {
  return _billable_get_currencies();
}