<?php
/**
* @file
* Code for the erpal_project billable module.
* ERPAL projects billable adds billable entity after saving timetracking to 
* agil project or task with payment informationto fixed price project
*/

//@todo should not be loaded on every request or posted in hook_init
require_once 'include/task.inc';
require_once 'include/project.inc';
require_once 'include/timetracking.inc';
require_once 'include/ajax.inc';

/**
* Implements hook_node_insert
*/
function erpal_projects_billable_node_insert($node) {
  $type = $node->type;

  if ($type == 'erpal_timetracking')
    _erpal_projects_billable_insert_timetracking($node);
 
  if ($type == 'erpal_task')
    _erpal_projects_billable_insert_task($node);
    
  if ($type == 'erpal_project')
    _erpal_projects_billable_insert_project($node);
}

/**
* Implements hook_node_insert
*/
function erpal_projects_billable_node_update($node) {
  $type = $node->type;

  if ($type == 'erpal_timetracking')
    _erpal_projects_billable_update_timetracking($node);
 
  if ($type == 'erpal_task')
    _erpal_projects_billable_update_task($node);
    
  if ($type == 'erpal_project')
    _erpal_projects_billable_update_project($node);
}

/**
* Implements hook_node_delete
*/
function erpal_projects_billable_node_delete($node) {
  //get all billables to this node and delete them!
  $billables = _erpal_projects_billable_billbales_by_subject_nid($node->nid, true);
  foreach ($billables as $billable) {
    if (!$billable->billed)  //only those that have not been billed
      $billable->delete();
  }
}

/**
* Implements hook_element_info_alter
*/
function erpal_projects_billable_element_info_alter(&$type) {

  _erpal_projects_billable_element_alter_nodereference_url($type);
}

/**
* implements hook_form_alter
*/
function erpal_projects_billable_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'erpal_task_node_form') {
    //alter task node pricing according to referenced project pricing
    $nid = $form['nid']['#value'];
    if (!$nid) { //only alter the form fields if the node will be created, not at update
      if (count($form_state['input']) <= 0 || isset($form_state['triggering_element'])) {
        //if we dont do that if statement, the form will be altered after submission which will lead to 
        //another altering of pricing information, which is bad!
        _erpal_projects_billable_preselect_task_create_form($form, $form_state);     
        
      }
    }
    
    _erpal_projects_billable_prepare_ajax_pricing_preselect($form, $form_state);
  }  
  
}

/**
* Adds ajax handler to project ref field to preselect pricing information
* if a task is created NOT BY using the reference by url widget
*/
function _erpal_projects_billable_prepare_ajax_pricing_preselect(&$form, $form_state) {
  $form['field_pricing'][LANGUAGE_NONE][0]['#prefix'] = '<div id="pricing_wrapper">';
  $form['field_pricing'][LANGUAGE_NONE][0]['#suffix'] = '</div>';
  $form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#ajax'] = array(
    'callback' => '_erpal_projects_billable_ajax_pricing_preselect_callback',
    'wrapper' => 'pricing_wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );
}

/**
* preselects the task node form with pricing information from the referenced project (if one is referenced)
*/
function _erpal_projects_billable_preselect_task_create_form(&$form, $form_state) {

  //ref_nid id is the node we copy the pricing information from. Mayba a project or another task
  //if parent is set and it is type erpal_task we use the parents tasks pricing
  $ref_nid = false; 
 
  if (isset($form['field_parent'][LANGUAGE_NONE][0]['target_id']['#default_value'])) 
    if ($form['field_parent'][LANGUAGE_NONE][0]['target_id']['#default_value']) {
      $parent_nid = $form['field_parent'][LANGUAGE_NONE][0]['target_id']['#default_value'];
      $parent_nid = _erpal_basic_helper_get_nid_from_autocomplete_string($parent_nid);

      $parent_node = node_load($parent_nid);
      if ($parent_node->type == 'erpal_task')
        $ref_nid = $parent_nid;
    }
  
  if (!$ref_nid) {
    $ref_nid = $form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#default_value'];
    $ref_nid = _erpal_basic_helper_get_nid_from_autocomplete_string($ref_nid);
  }
 
  //perhaps, there is a project_nid in form_state, we can use that because it has been submitted by ajax!
  if (!empty($form_state['values']['field_project_ref']))
    $ref_nid = $form_state['values']['field_project_ref'][LANGUAGE_NONE][0]['target_id'];

  if (!$ref_nid)
    return; //if we dont have a project, we dont have data to preselect the task price fields with
    
  //we prefill the price mode of the task the same as at the project. If the project has
  //price mode "per_hour" we preselect the price (this is the price per hour).

  $preselects = _erpal_projects_billable_get_task_preselects($ref_nid);

  $form['field_pricing'][LANGUAGE_NONE][0]['field_price_mode'][LANGUAGE_NONE]['#value'] = $preselects['price_mode'];
  $form['field_pricing'][LANGUAGE_NONE][0]['field_vat_rate'][LANGUAGE_NONE]['#value'] = $preselects['vat_rate'];
  $form['field_pricing'][LANGUAGE_NONE][0]['field_currency'][LANGUAGE_NONE]['#value'] = $preselects['currency'];
  
  $price = '';
  if ($preselects['price_mode'] == 'per_hour') {
    //Fill the price per hour
    $price = $preselects['price'];
  }
  
  $form['field_pricing'][LANGUAGE_NONE][0]['field_price'][LANGUAGE_NONE][0]['value']['#value'] = $price;
}

/**
* Returns pricing preset values for a task according to its referenced node (parent task or project)
*/
function _erpal_projects_billable_get_task_preselects($ref_nid) {

  $ref_node = node_load($ref_nid);

  $preselects = _erpal_projects_billable_get_pricing($ref_node);
  
  if ($preselects['price_mode'] == 'fixed_price')  
    $preselects['price_mode'] = 'not_billable'; //in most cases if the project is a fixed price project, the task is not billable
    
  return $preselects;
}


/**
* Creates a new bilable entity
* @param $billabel if set, this billable will be updated, otherwise a new billable will be created
*/
function _erpal_project_billable_save_billable($subject_title, $customer_nid, $subject_nid, $quantity, $single_price, $currency, $vat_rate, $date_delivery, $billable=false, $contractor_nid=false) {

  //@todo sollte das besser mit billable_create aus dem modul billable in billable.entity.inc getan werden?
  if (!$billable)
    $billable = new Billable;
  else
    if ($billable->billed)
      return false; //this is already billed so it could not be changed!
   
  if (!$contractor_nid) {
    //contractor is the own company
    $contractor_nid = _erpal_basic_helper_get_own_company_nid(false);
  }
   
  $billable->subject = $subject_title;
  $billable->type = 'billable';
  $billable->currency = $currency;
  $billable->billed = false;
  $billable->subject_nid = $subject_nid;
  $billable->quantity = $quantity;
  $billable->single_price = $single_price;
  $billable->vat_rate = $vat_rate;
  $billable->date_delivery = $date_delivery;
  $billable->created = time();
  $billable->changed = time();
  $billable->customer_nid = $customer_nid;
  $billable->contractor_nid = $contractor_nid;
  entity_save('billable', $billable);
  
  return true;
}


/**
* Function that checks if a given subject is billable
* @param a node as subject
* @return an array with billing information necessary for creating a new billable entiy
*/
function _erpal_projects_billable_subject_billabel_information_subject($node) {

  $type = $node->type;  
  switch ($type) {
    case 'erpal_task': return _erpal_projects_billable_subject_billable_information_task_subject($node);    
    case 'erpal_project': return _erpal_projects_billable_subject_billable_information_project_subject($node); 
    case 'erpal_timetracking': return _erpal_projects_billable_subject_billable_information_timetracking_subject($node);  
  }
  
  return array();
}

/**
* returns the billing information of a task
* @param the task node
* @retur an array with billing information like price mode, price etc
*/
function _erpal_projects_billable_subject_billable_information_task_subject($node) {
  
  //add the customer 
  //first get the project
  $project_nid = $node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
  $project_node = node_load($project_nid);
  
  //if task has own pricing information set, return these!
  $pricing = _erpal_projects_billable_get_pricing($node);

  //perhaps we have purchasing information set on the task or the project.
  $buy_pricing = array();
  $buy_pricing['buy_price'] = $pricing['buy_price'];
  $buy_pricing['buy_vat_rate'] = $pricing['buy_vat_rate'];
  $buy_pricing['buy_currency'] = $pricing['buy_currency'];
  $buy_pricing['contractor_nid'] = $pricing['contractor_nid'];
  
  if ($pricing['price_mode'] && $pricing['price']) {
    $info['price_mode'] = $pricing['price_mode'];
    $info['price'] = $pricing['price'];
    $info['vat_rate'] = $pricing['vat_rate'];
    $info['currency'] = $pricing['currency'];
    //now get customer of project
    $customer_nid = $project_node->field_customer_ref[LANGUAGE_NONE][0]['target_id'];
    $customer_node = node_load($customer_nid);
    $info['customer'] = $customer_node;
    $info = array_merge($info, $buy_pricing);
    return $info;
  }  
    
  $info = _erpal_projects_billable_subject_billable_information_project_subject($project_node);
  $info = array_merge($info, $buy_pricing);    
  return $info;
}

/**
* returns the billing information of a project
* @param the project node
* @retur an array with billing information like price mode, price etc
*/
function _erpal_projects_billable_subject_billable_information_project_subject($node) {

  $pricing = _erpal_projects_billable_get_pricing($node);
  if (count($pricing) <= 0)
    return array();
    
  $info['price_mode'] = $pricing['price_mode'];
  $info['price'] = $pricing['price'];
  $info['vat_rate'] = $pricing['vat_rate'];
  $info['currency'] = $pricing['currency'];

  //add the customer 
  $project_node = $node;
  
  //now get customer of project
  $customer_nid = $project_node->field_customer_ref[LANGUAGE_NONE][0]['target_id'];
  $customer_node = node_load($customer_nid);
  
  $info['customer'] = false;
  if ($customer_node->nid)
    $info['customer'] = $customer_node;  

  //perhaps we have purchasing information set on the task or the project.  
  $info['buy_price'] = $pricing['buy_price'];
  $info['buy_vat_rate'] = $pricing['buy_vat_rate'];
  $info['buy_currency'] = $pricing['buy_currency'];
  $info['contractor_nid'] = $pricing['contractor_nid'];
    
  return $info;
}

/**
* Return the billing information of the task of the timetracking!
* @param $node the timetracking node
*/
function _erpal_projects_billable_subject_billable_information_timetracking_subject($node) {
  //get the referenced node first
  
  $subject_nid = $node->field_timetracking_subject[LANGUAGE_NONE][0]['target_id'];
  $subject_node = node_load($subject_nid);
  
  return _erpal_projects_billable_subject_billable_information_task_subject($subject_node);
}

/**
* returns the price mode to an project or task
* @param a project or task node
*/
function _erpal_projects_billable_get_pricing($node) {

  $type = $node->type;
  
  if ($type == 'erpal_project' || $type == 'erpal_task') {
    //get the pricing field collection    
    
    if (!isset($node->field_pricing[LANGUAGE_NONE][0]['value']))
      return array();
      
    $pricing_entity_id = $node->field_pricing[LANGUAGE_NONE][0]['value'];

    $pricing_entity = entity_load('field_collection_item', array($pricing_entity_id));  
    $pricing_entity = $pricing_entity[$pricing_entity_id];

    $price_mode = $pricing_entity->field_price_mode[LANGUAGE_NONE][0]['value']; 
    $price = 0;
    if (isset($pricing_entity->field_price[LANGUAGE_NONE]))
      $price = $pricing_entity->field_price[LANGUAGE_NONE][0]['value'];
    
    $currency = 0;
    if (isset($pricing_entity->field_currency[LANGUAGE_NONE]))
      $currency  = $pricing_entity->field_currency[LANGUAGE_NONE][0]['value'];
    
    $vat_rate = 0;
    if (isset($pricing_entity->field_vat_rate[LANGUAGE_NONE]))
      $vat_rate  = $pricing_entity->field_vat_rate[LANGUAGE_NONE][0]['value'];
    
    //now set the buying pricing information
    $contractor_nid = 0;
    if (isset($pricing_entity->field_contractor_ref[LANGUAGE_NONE]))
      $contractor_nid = $pricing_entity->field_contractor_ref[LANGUAGE_NONE][0]['target_id'];
    
    $buy_price = 0;
    if (isset($pricing_entity->field_buy_price[LANGUAGE_NONE]))
      $buy_price = $pricing_entity->field_buy_price[LANGUAGE_NONE][0]['value'];
      
    $buy_vat_rate = 0;
    if (isset($pricing_entity->field_buy_vat_rate[LANGUAGE_NONE]))
      $buy_vat_rate = $pricing_entity->field_buy_vat_rate[LANGUAGE_NONE][0]['value'];
      
    $buy_currency = 0;
    if (isset($pricing_entity->field_buy_currency[LANGUAGE_NONE]))
      $buy_currency = $pricing_entity->field_buy_currency[LANGUAGE_NONE][0]['value'];
      
    return array(
      'price_mode' => $price_mode,
      'price' => $price,
      'vat_rate' => $vat_rate,
      'currency' => $currency,
      'contractor_nid' => $contractor_nid,
      'buy_price' => $buy_price,
      'buy_vat_rate' => $buy_vat_rate,
      'buy_currency' => $buy_currency,
    );
  }
}

/**
* returns all billables to a given subject
* @param $subjec_nid the node the billable references at
* @param $loaded if true, the entity is completely loaded otherwise only the id is returned
*/
function _erpal_projects_billable_billbales_by_subject_nid($subject_nid, $loaded=false) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'billable')
    ->entityCondition('bundle', 'billable')
    ->propertyCondition('subject_nid', $subject_nid, '='); // run the query as user 1
    
  $result = $query->execute();
  
  $ret = array();
  if (isset($result['billable'])) {  
    foreach ($result['billable'] as $id => $obj) {    
      if ($loaded) {
        $billable = entity_load('billable', array($obj->billable_id));
        $ret[$obj->billable_id] = $billable[$obj->billable_id];
      } else
        $ret[$obj->billable_id] = $obj->billable_id;
    }
  }

  return $ret;
}

/**
* Callback function for returning all available VAT
*/
function erpal_billable_field_vat_rate_allowed_values() {
  return _billable_vat_rates();
}

/**
* Callback function for returning all available currencies
*/
function erpal_billable_field_currency_allowed_values() {
  return _billable_get_currencies();
}

/**
* Callback function for returning all available VAT
*/
function erpal_billable_field_buy_vat_rate_allowed_values() {
  return _billable_vat_rates();
}

/**
* Callback function for returning all available currencies
*/
function erpal_billable_field_buy_currency_allowed_values() {
  return _billable_get_currencies();
}

/**
* Function kicks a billable entity for the given subject node or updates the billable entity
* @param $node the node the billable entity references as subjects
* @param $op may be insert (if node is inserted) or update (if node is updated)
*/
function _erpal_billable_update_billable($node, $op) {
    
  if ($node->type == 'erpal_timetracking') {
    $timetracking_node = $node;
    $quantity = $node->field_billing_duration[LANGUAGE_NONE][0]['value']; //cause it is a timetracking node!
    $node = node_load($node->field_timetracking_subject[LANGUAGE_NONE][0]['target_id']);    
    $type = $timetracking_node->type;
    $a_uid = $timetracking_node->uid;
    $subject_node = $timetracking_node;
  } else {
    $quantity = 1; //cause it is fixed price
    $type = $node->type;
    $a_uid = $node->uid;
    $subject_node = $node;
  }
  
  $billable_information = _erpal_projects_billable_subject_billabel_information_subject($node);  
  
  $my_company_nid = _erpal_basic_helper_get_own_company_nid(false);
  //handle timetracking for the user that inserts the timetracking. If it is a freelancer, create a billable for him
  
  $tags = _erpal_profile_helper_project_tag_ids($node);
  $contract = _erpal_profile_helper_get_current_contract($a_uid, $tags);  //get the current contract
  
  //now we have all information to create a billable from this subject
  $price = isset($billable_information['price']) ? $billable_information['price'] : 0;  
  $customer_node = $billable_information['customer'];
  
  $single_price = $price;
  $customer_nid = $customer_node->nid;
  $subject_nid = $subject_node->nid;  //the subject is the timetracking itself
 
  $currency = $billable_information['currency'];
  $vat_rate = $billable_information['vat_rate'];
  $subject_title = $subject_node->title;
  $date_delivery = time();  //the current time
  
  if ($op == 'insert') { 
    if (_erpal_billable_is_billable($billable_information, $node, $type)) {  
      //last parameter is set false, so we create a new billable!
      _erpal_project_billable_save_billable(
        $subject_title, 
        $customer_nid, 
        $subject_nid, 
        $quantity, 
        $single_price, 
        $currency, 
        $vat_rate, 
        $date_delivery, 
        false
      );
            
    }    
    
    //we have one contract
    //if it is a freelancer, create a billable everytime we create a timetracking, no matter if the task is per hour.
    //this timetracking is not necessary billed to the customer!
    if ($contract['member_type'] == 'freelancer' && $type == 'erpal_timetracking') {

      _erpal_project_billable_save_billable(
        $subject_title, 
        $customer_nid, 
        $subject_nid, 
        $quantity, 
        $contract['price'],
        $contract['currency'], 
        $contract['vat_rate'], 
        $date_delivery, 
        false,
        $contract['contractor_nid']
      );
    }
    
    //and if we have a contractor set, we create a billable for the contractor, too!
    //only if this is a task or a project      
    if ($billable_information['contractor_nid'] && ($type == 'erpal_project' || $type == 'erpal_task')) {
      _erpal_project_billable_save_billable(
        $subject_title, 
        $my_company_nid, 
        $subject_nid, 
        $quantity, 
        $billable_information['buy_price'],
        $billable_information['buy_currency'],
        $billable_information['buy_vat_rate'],
        $date_delivery, 
        false,
        $billable_information['contractor_nid']
      );
    }
  } 
  elseif ($op == 'update') {
    //get the current billables
    $billables = _erpal_projects_billable_billbales_by_subject_nid($subject_node->nid, true);
    $has_billable = false;
    $is_billable = _erpal_billable_is_billable($billable_information, $node, $type);
    $is_billable_contractor = _erpal_billable_is_billable($billable_information, $node, $type, false); 
    //timetracking is alway billable for freelancers!
    $is_billable_contractor = $is_billable_contractor || ($contract['member_type'] == 'freelancer' && $type == 'erpal_timetracking');
    $needs_billable_contractor = $is_billable_contractor && (
      ($billable_information['contractor_nid'] && $billable_information['buy_price'] && 
        ($type == 'erpal_task' || $type == 'erpal_project')
      ) || 
      ($contract['member_type'] == 'freelancer' && $type == 'erpal_timetracking')
    );  //festpreis oder contract!    

    foreach ($billables as $id=>$billable) {
      $has_billable = true;
      if ($billable->billed) {
        continue;  //do nothing, cause it is already billed
      }

      //not billable any more? Or there was a contractor that gets payed but he isnt any more
      if ((!$is_billable && $billable->contractor_nid == $my_company_nid) || 
          (!$needs_billable_contractor && $billable->contractor_nid != $my_company_nid)) {        
        //delete the billable, it is not allowed here, cause the task has not been completed!
        drupal_set_message(t('Billables have been deleted because the subject is no more billable!'), 'warning');
        entity_delete('billable', $billable->billable_id);
      } else {   
        //if is billable, update the billable
        //last parameter is set false, so we create a new billable!
        $contractor_nid = $billable->contractor_nid;
        if ($contractor_nid != $my_company_nid) {          
          //we update a billable from anoter contractor, A FREELANCER billable or another contractor
          //get the price, currency and vat_rate of the freelancer
          $needs_billable_contractor = false; //we dont need a billable to create for the contractor because we already have one!
          //if it is a timetracking, take the contract
          if ($type == 'erpal_timetracking') {
            $single_price = $contract['price'];
            $currency = $contract['currency']; 
            $vat_rate = $contract['vat_rate']; 
          } elseif ($type == 'erpal_task' || $type == 'erpal_project') {
            //use the purchase data at the node
            $single_price = $billable_information['buy_price'];
            $currency = $billable_information['buy_currency'];
            $vat_rate = $billable_information['buy_vat_rate'];
          }
          
          $customer_nid = $my_company_nid;  //this is the customer, the contractor will bill this to us, not to the
          //customer of the project
        }
        
        _erpal_project_billable_save_billable(
            $subject_title, 
            $customer_nid, 
            $subject_nid, 
            $quantity, 
            $single_price, 
            $currency, 
            $vat_rate, 
            $date_delivery, 
            $billable,  //update this one
            $contractor_nid
          );
      }
              
    }
    
    //add billables on update!
    if (!$has_billable && $is_billable) {
      //create a new billable
      //last parameter is set false, so we create a new billable!
      _erpal_project_billable_save_billable(
        $subject_title, 
        $customer_nid, 
        $subject_nid, 
        $quantity, 
        $single_price, 
        $currency, 
        $vat_rate, 
        $date_delivery, 
        false  //create a new billable
      );
    }
    
    if ($needs_billable_contractor) {
      //create a new billable
      //last parameter is set false, so we create a new billable!
      $contractor_nid = $billable_information['contractor_nid'];
      if ($type == 'erpal_timetracking') {
        $single_price = $contract['price'];
        $currency = $contract['currency']; 
        $vat_rate = $contract['vat_rate']; 
      } elseif ($type == 'erpal_task' || $type == 'erpal_project') {
        //use the purchase data at the node
        $single_price = $billable_information['buy_price'];
        $currency = $billable_information['buy_currency'];
        $vat_rate = $billable_information['buy_vat_rate'];
      }
      _erpal_project_billable_save_billable(
        $subject_title, 
        $my_company_nid, 
        $subject_nid, 
        $quantity, 
        $single_price, 
        $currency, 
        $vat_rate, 
        $date_delivery, 
        false,  //create a new billable
        $contractor_nid
      );
    }
  }
}

/**
* Checks dependend on the subject if this is billable
*/
function _erpal_billable_is_billable($billable_information, $node, $type, $fix_price_needed_for_billable=true) {
  
  $price_mode = isset($billable_information['price_mode']) ? $billable_information['price_mode'] : 0;
  $price = isset($billable_information['price']) ? $billable_information['price'] : 0;  
  $customer_node = $billable_information['customer'];

  $status = '';
  if ($type == 'erpal_task' || $type == 'erpal_project') {
    if ($type == 'erpal_task') {
      if (isset($node->field_task_status[LANGUAGE_NONE][0]))
        $status = $node->field_task_status[LANGUAGE_NONE][0]['value'];  
    } elseif ($type == 'erpal_project') {
      if (isset($node->field_project_status[LANGUAGE_NONE][0]))
        $status = $node->field_project_status[LANGUAGE_NONE][0]['value'];
    }
    return ($price_mode == 'fixed_price' || !$fix_price_needed_for_billable) && $price && $customer_node && $status == 'completed';
  }
  elseif ($type == 'erpal_timetracking') {
    return $price_mode == 'per_hour' && $price && $customer_node;
  }
}
