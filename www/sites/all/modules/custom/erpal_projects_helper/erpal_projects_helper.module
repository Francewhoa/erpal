<?php
/**
 * @file
 * Code for the erpal_projects_helper module.
 */

//@todo should be in hook_init?
module_load_include('inc', 'erpal_projects_helper', 'inc/projects');
module_load_include('inc', 'erpal_projects_helper', 'inc/tasks');
module_load_include('inc', 'erpal_projects_helper', 'inc/timetracking');
module_load_include('inc', 'erpal_projects_helper', 'inc/book');
 
/**
* Implements hook_init
*/
function erpal_projects_helper_init() {
  $mod_path = drupal_get_path('module', 'erpal_projects_helper');
  $css_path = $mod_path.'/erpal_projects_helper.css';
  drupal_add_css($css_path);
}
 
/**
* Implements hook_menu
*/ 
function erpal_projects_helper_menu(){

  $items = array();
  
  require_once 'inc/config.inc';
  $config_items = _erpal_projects_helper_config_menu();
  
  $items = array_merge($items, $config_items);
  return $items;
}

/**
* Implements hook_node_validate
*/
function erpal_projects_helper_node_validate($node) {

  if ($node->type == 'erpal_project') {
    if (isset($node->field_books_ref[LANGUAGE_NONE])) {
      foreach ($node->field_books_ref[LANGUAGE_NONE] as $delta => $nid) {
        
        if (!is_numeric($delta))
          continue;
        
        $book_nid = $nid['target_id'];        
        if (!$book_nid)
          continue;
        
        $projects = _erpal_projects_helper_book_multiple_referenced_by_project_validate($book_nid, array($node->nid));
        if (count($projects) > 0) {
          $project_nid = $projects[0];
          $project_node = node_load($project_nid);
          $project_link = l($project_node->title, 'node/'.$project_node->nid);
          form_set_error('field_books_ref]['.LANGUAGE_NONE.']['.$delta.'][target_id', t('The book can only be included into one project and is already included in "!project_link"', array('!project_link' => $project_link)));
        }
      }
    }
  }
}
  
/**
* Implements hook_permission
*/
function erpal_projects_helper_permission(){
  return array(
    'config erpal projects' => array(
      'title' => t('Administer ERPAL Projects'), 
      'description' => t('Perform administration tasks for ERPAL Projects module.'),
    ),
  );
}

/**
* Implements hook_clone_book_action_form_alter
* Form to set parameter to clone tasks in book clone process
* @param $args['book_node'] is the book node that will be cloned
*/
function erpal_projects_helper_clone_book_action_form_alter(&$form, $form_state, $args) {
  $book_node = $args['book_node'];
  _erpal_projects_helper_ensure_task_settings_form_element($form);
  _erpal_projects_helper_clone_tasks_form_add_elements($form, $book_node, 'book');
  
}

/**
* additional validation handler for clone config form of task elements
*/
function erpal_projects_helper_clone_book_action_form_validate($form, $form_state) {
  $values = $form_state['values'];
  $clone_tasks = $values['clone_tasks'];
  $project = isset($values['project']) ? $values['project'] : 0;
  $reset_tasks_status = $values['reset_task_status'];
  $clone_type = $values['clone_type'];
  
  if (!$clone_tasks)
    return; //if tasks will not be cloned no further validation is needed
    
  //all values must be set!
  if (!$project && $clone_type == 'book')
    form_set_error('project', t('Please select a project'));
}

/**
* Implements hook_clone_page_action_form_alter provided by clone bulk operation by erpal_book_helper module
* @param $args['book_node'] is the book the cloned pages are referenced to
* @param $args['parent_node'] is the parent node the cloned node will be directely referenced to.
*/
function erpal_projects_helper_clone_page_action_form_alter(&$form, $form_state, $args) {
  $book_node = $args['book_node'];
  $parent_node = $args['parent_node'];
  //check if the given book to clone hase a project, otherwise show a message that tasks will not be cloned
  //cause book needs a project
  $projects = _erpal_project_helper_get_referencing_projects_by_book($book_node->nid);
  
  if ($projects) {
    _erpal_projects_helper_clone_tasks_form_add_elements($form, $book_node, 'page');    
  } else {
    $node_link = l($book_node->title, 'node/'.$book_node->nid);
    $form['clone_tasks'] = array(
      '#type' => 'item',
      '#markup' => t('INFORMATION: Tasks are not cloned because !node_link is not assigned to a project', array('!node_link' => $node_link)),
    );
  }
}

/**
* Implements hook_options_for_clone_alter
* Function alters clone options after clone config form has been submitted by clone bulk operation or book clone
*/
function erpal_projects_helper_options_for_clone_alter(&$options, $form_values) {
  $options['reset_task_status'] = isset($form_values['reset_task_status']) ? $form_values['reset_task_status'] : 0;
  $options['project'] = isset($form_values['project']) ? $form_values['project'] : 0;
}

/**
* Returns clone tasks subform elements needed for cloning operations of books and book pages
* @param $clone_type is page (if a page is cloned to be a sub page of an existing book) or book (if a whole book is cloned to a new one)
*/
function _erpal_projects_helper_clone_tasks_form_add_elements(&$form, $book_node, $clone_type) {
  
  //if there is no project referencing that book, no options to clone taks should be displayed
  $project_nid = _erpal_projects_helper_has_project($book_node);
  
  if (!$project_nid)
    return;
  
  $form['clone_tasks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Clone tasks'),
    '#default_value' => false,
    '#description' => t('If checked, all tasks of the selected templates will be cloned, too'),
    '#weight' => -5,
  );
  
  _erpal_projects_helper_ensure_task_settings_form_element($form);
  
  $form['clone_type'] = array(
    '#type' => 'value',
    '#value' => $clone_type,
  );
  
  if ($clone_type == 'book') {
    $projects = _erpal_projects_helper_get_projects();
    $form['task_settings']['project'] = array(
      '#type' => 'select',
      '#title' => t('Project'),
      '#description' => t('For cloning tasks you need to choose a project the cloned book will be assigned to'),
      '#options' => $projects,
    );
    
    $form['#validate'][] = 'erpal_projects_helper_clone_book_action_form_validate';
  }
  
  $form['task_settings']['reset_task_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set task status to inserted and progress to 0%'),
    '#default_value' => true,
  );
}

/**
* Ensures that a task settings fieldset element is available in the given form
*/ 
function _erpal_projects_helper_ensure_task_settings_form_element(&$form) {
  //if clone tasks is checked, show some other relevant information for cloning tasks
  if (!isset($form['task_settings'])) {
    $form['task_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Task and project settings'),
      '#collapsible' => true,
      '#collapsed' => false,
      '#states' => array(
        // Show the settings when the clone tasks checkbox is checked.
        'visible' => array(
          ':input[id="edit-clone-tasks"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
* Implements hook_form_alter
*/
function erpal_projects_helper_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'erpal_task_node_form') {
    _erpal_projects_helper_task_node_form_alter($form, $form_state);
  }
  
  if ($form_id == 'erpal_books_helper_pdf_form') {
    _erpal_projects_helper_book_pdf_form_alter($form, $form_state);
  }
  
  if ($form_id == 'erpal_project_node_form') {
    _erpal_projects_helper_project_node_form_alter($form, $form_state);
  }
 
  if ($form_id == 'node_delete_confirm') {
    _erpal_projects_helper_node_delete_confirm_alter($form, $form_state);
  }
}

/**
* Alter delete form
*/
function _erpal_projects_helper_node_delete_confirm_alter(&$form, $form_state) {
  $delete_nid = $form['nid']['#value'];
  $delete_node = node_load($delete_nid);
  
  $project_nid = _erpal_projects_helper_has_project($delete_node);
  
  if (!$project_nid)
    return; 
  
  if ($delete_node->type == 'erpal_project') {
    //ask if task children should be delete, too
    $form['delete_tasks_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Task delete options'),
    );
    
    $node_link = l($delete_node->title, "node/".$delete_node->nid);
    $form['delete_tasks_fieldset']['delete_children'] = array(
      '#type' => 'checkbox',
      '#title' => t('I submit that all tasks of !node_link will be deleted.', array('!node_link' => $node_link)),
      '#default_value' => false,
    ); 
    
    $form['delete_tasks_fieldset']['delete_timetrackings'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete timetrackings of tasks, too'),
      '#default_value' => false,
      '#states' => array(
        // Hide the settings when the checkbox is checked notify checkbox is disabled.
        'visible' => array(
          ':input[name="delete_children"]' => array('value' => 'delete'),
        ),
      ),
    ); 
    
    $form['#validate'][] = '_erpal_projects_helper_project_delete_confirm_validate';
    $form['#submit'][] = '_erpal_projects_helper_project_delete_confirm_submit';
    
  } elseif ($delete_node->type == 'erpal_task') {
    $form['delete_tasks_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sub task delete options'),
    );
    
    //ask if sub tasks should be deleted or if they should moved under the parent of the deleted node
    $node_link = l($delete_node->title, "node/".$delete_node->nid);
    $form['delete_tasks_fieldset']['delete_children'] = array(
      '#type' => 'radios',
      '#title' => t('Handle children options'),
      '#options' => array(
        'delete' => t('Delete sub tasks'),
        'parent' => t('Add to upper level parent task'),
      ),
      '#default_value' => 'parent',
    ); 

    $form['delete_tasks_fieldset']['delete_timetrackings'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete timetrackings of tasks, too'),
      '#default_value' => false,
      '#states' => array(
        // Hide the settings when the checkbox is checked notify checkbox is disabled.
        'visible' => array(
          ':input[name="delete_children"]' => array('value' => 'delete'),
        ),
      ),
    ); 

    
    //add project_nid and parent_nid as hidden values bevor node will be deleted
    $project_nid = $delete_node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
    $parent_nid = $delete_node->field_parent[LANGUAGE_NONE][0]['target_id'];
    
    $form['delete_node'] = array(
      '#type' => 'value',
      '#value' => $delete_node,
    );
    
    $form['project_node'] = array(
      '#type' => 'value',
      '#value' => node_load($project_nid),
    );
    
    $form['parent_node'] = array(
      '#type' => 'value',
      '#value' => node_load($parent_nid),
    );
    
    $form['#submit'][] = '_erpal_projects_helper_task_delete_confirm_submit';
  }
}

/**
* Submit handler of task delte confirm form
*/
function _erpal_projects_helper_task_delete_confirm_submit($form, $form_state) {
  $values = $form_state['values'];  
  $delete_node = $values['delete_node']; //node that will be deleted  
  $project_nid = $delete_node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
  $parent_node = $values['parent_node'];
  $delete_children = isset($values['delete_children']) ? $values['delete_children'] : false;

  if ($delete_children == 'parent') {
    //add all nodes to parent node
    $options = array();
    $options['export_tasks'] = true;
    //get all nodes that reference the delete node using the field_parent
    $child_nids = _erpal_projects_helper_get_tasks_child_nodes($delete_node, $options, true);
    $callback_function = '_erpal_projects_helper_bulk_update_callback';
    $args['parent_nid'] = $parent_node->nid;
    
    _erpal_basic_helper_bulk_update($child_nids, $callback_function, $args, 'node/'.$project_nid);
   
  } elseif ($delete_children == 'delete') {
    //delete all sub tasks.
    $types = array('erpal_task');
    $child_nids = _erpal_basic_helper_get_all_child_nids_deep_search($delete_node->nid, $types);

    //get timetrackings if they should be deleted
    $delete_timetrackings = isset($values['delete_timetrackings']) ? $values['delete_timetrackings'] : false;
   
    $subject_nids = array($delete_node->nid);
    $subject_nids = array_merge($subject_nids, $child_nids);
    $nids = array();
    if ($delete_timetrackings) {
      //get timetrackings to all child nids
      $timetracking_nids = _erpal_projects_helper_get_direct_timetrackings($subject_nids);
      $child_nids = array_merge($child_nids, $timetracking_nids);   
      $subject_nids = array_merge($subject_nids, $timetracking_nids);
    }
    
    if (count($child_nids) > 0)
      $nids['node'] = $child_nids;
   
    //billables will be automatically deleted if they are not billed
    
    $redirect = 'node/'.$project_nid;
    _erpal_basic_helper_bulk_delete($nids, $redirect);    
  }
}

/**
* Callback to update a node via bulk operation
*/
function _erpal_projects_helper_bulk_update_callback($node, $args) {
  $parent_nid = $args['parent_nid'];
  
  $node->field_parent[LANGUAGE_NONE][0]['target_id'] = $parent_nid;
}

/**
* Submit handler of project delete confir form
*/
function _erpal_projects_helper_project_delete_confirm_submit($form, $form_state) {
  $values = $form_state['values'];  
  $delete_nid = $values['nid'];

  //get all book_pages of given book and give them to bulk delete operation.
  $options = array();
  $task_nids = _erpal_projects_helper_get_tasks_by_project($delete_nid);

  $task_nids = array('node' => $task_nids);
  _erpal_basic_helper_bulk_delete($task_nids, 'books/books');
}

/**
* Validation handler of project delete confirm
*/
function _erpal_projects_helper_project_delete_confirm_validate($form, $form_state) {
  $values = $form_state['values'];  
  $delete_nid = $values['nid'];
  $delete_node = node_load($delete_nid);

  $delete_children = isset($values['delete_children']) ? $values['delete_children'] : false;
  
  //if book will be delete checkbox must be set!
  if ($delete_node->type == 'erpal_project') {
    if (!$delete_children)
      form_set_error('delete_children', t('Please submit checkbox to delete all tasks'));
  }
}

/**
* Alters the project node form
*/
function _erpal_projects_helper_project_node_form_alter(&$form, &$form_state) {
  //if form is filled by entityreference prepopulate, the crm activity is already prefilled.
  //with the activity we can preselect the customer, because it may be the same as in activity and project
  //in most cases
  $nid = $form['nid']['#value'];
  
  //if node already exists, do nothing here
  if ($nid)
    return;
  
  $activity_nid = $form['field_activity_ref'][LANGUAGE_NONE][0]['target_id']['#default_value'];
  $activity_nid = _erpal_basic_helper_get_nid_from_autocomplete_string($activity_nid);

  if (!empty($activity_nid) && is_numeric($activity_nid)) {
    $activity_node = node_load($activity_nid);
    $customer_nid = false;

    if (isset($activity_node->field_customer_ref[LANGUAGE_NONE][0]['target_id'])) {
      $customer_nid = $activity_node->field_customer_ref[LANGUAGE_NONE][0]['target_id'];
    }

    if ($customer_nid) {
      $customer_node = node_load($customer_nid);
      $form['field_customer_ref'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $customer_node->title." (".$customer_nid.")";
    }
  }
}

/**
* Returns the initial task status if task is inserted
*/
function _erpal_projects_helper_insert_task_state() {
  return 'inserted';
}

/**
* Alters the tasks form
*/
function _erpal_projects_helper_task_node_form_alter(&$form, &$form_state) {
  //only if node will be new created
  $nid = $form['nid']['#value'];
  if (!$nid) {
    //if parent is already set, hide the project field, but preset it so pricing information can be reloaded!
    if (isset($form['field_parent'][LANGUAGE_NONE][0]['target_id']['#default_value']))
      if ($form['field_parent'][LANGUAGE_NONE][0]['target_id']['#default_value']) {
        $parent_nid = $form['field_parent'][LANGUAGE_NONE][0]['target_id']['#default_value'];
        $parent_nid = _erpal_basic_helper_get_nid_from_autocomplete_string($parent_nid);
        $parent_node = node_load($parent_nid);
        $project_nid = _erpal_projects_helper_has_project($parent_node);          
        
        $form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#type'] = 'value';
        $form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#default_value'] = _erpal_basic_helper_autocomplete_string_from_nid($project_nid);

        $form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#required'] = false;  //will be automatically set @see _erpal_projects_helper_task_set_project in task.inc again
        
        //alter pricing information!
        //_erpal_projects_billable_preselect_task_create_form($form, $form_state);
        
      }
    //if project is already set, hide the parent field
    if (isset($form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#default_value']))
      if ($form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#default_value']) {
        $form['field_parent'][LANGUAGE_NONE][0]['target_id']['#type'] = 'value';
        $form['field_parent'][LANGUAGE_NONE][0]['target_id']['#required'] = false;
      }
  } else {
    //hide parent and project ref anyway!
    $form['field_project_ref'][LANGUAGE_NONE][0]['target_id']['#type'] = 'value';
    $form['field_parent'][LANGUAGE_NONE][0]['target_id']['#type'] = 'value';
  }
  
}

/**
* Decides if project links like add timetracking and tasks should be shown in a book. 
* This is only true if we have project referencing te book
* @return false if there is noch project, otherwise ONE nid of a project
*/
function _erpal_projects_helper_has_project($node) {

  if ($node->type == 'erpal_task') {
    //get the project of the task, because a task alsways has a project assigned
    $project_nid = $node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
    return $project_nid; //tasks allways have a project
  }  
  elseif ($node->type == 'erpal_book') {
    $book_nid = $node->nid;
  }  
  elseif ($node->type == 'erpal_book_page') {
    $book_nid = $node->field_book_ref[LANGUAGE_NONE][0]['target_id'];    
  } 
  elseif ($node->type == 'erpal_project') {
    return $node->nid;
  }
  else
    return false;

  //now check if there is a project referencing this node
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'erpal_project')
  ->fieldCondition('field_books_ref', 'target_id', $book_nid, '=');

  $result = $query->execute();
  if (isset($result['node']) && count($result['node']) > 0) {
    $nids = array_keys($result['node']);
    return $nids[0];
  }
  
  return false;
}

/**
* Validates that the given book node is only referenced by one project
* @param $ignore_nids are project nids that are ignored, even if they reference the given book
*/
function _erpal_projects_helper_book_multiple_referenced_by_project_validate($book_nid, $ignore_nids=array()) {
  $project_nids = _erpal_project_helper_get_referencing_projects_by_book($book_nid);
  
  $nids = array();
  
  if (is_array($project_nids)) {
    foreach ($project_nids as $nid) {
      if (!in_array($nid, $ignore_nids))
        $nids[] = $nid;
    }
  }
  
  return $nids;
}

/**
* returns the project nids that reference the given book
*/
function _erpal_project_helper_get_referencing_projects_by_book($book_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'erpal_project')
  ->fieldCondition('field_books_ref', 'target_id', $book_nid, '=')
  ->addMetaData('account', user_load(1)); // run the query as user 1

  $result = $query->execute();

  if (isset($result['node'])) {
    $project_nids = array_keys($result['node']);
    return $project_nids;
  }
}

/**
* Implements hook_node_view_post provided by post_hooks module
*/
function erpal_projects_helper_node_view_post($node) {
  if (is_object($node)) {    
    if ($node->type == 'erpal_project') {      
      unset($node->content['links']['nodereference_url']['#links']['erpal_book_page_field_parent']);
      unset($node->content['links']['nodereference_url']['#links']['erpal_task_field_parent']);
    }
    
    if ($node->type == 'erpal_task') {
      unset($node->content['links']['nodereference_url']['#links']['erpal_book_page_field_parent']);
    }
    
    if ($node->type == 'erpal_book') {
      unset($node->content['links']['nodereference_url']['#links']['erpal_task_field_parent']);          
    }
  }
}

/**
* Renders a html output to show where a book with the given nid is rendered (at which projects)
* This function is called by the custom content field "used in projects" used in the book node panel
*/
function _erpal_projects_helper_render_projects_referencing_books($book_nid) {
  $projects = _erpal_project_helper_get_referencing_projects_by_book($book_nid);
  $projects_nodes = node_load_multiple($projects);
  $links = '';
  foreach ($projects_nodes as $nid=>$project_node) {
    $links .= "<div class='book_usage'>".l($project_node->title, 'node/'.$project_node->nid)."</div>";
  }
  return $links;
}

/**
* This function is called by the projects view to add a link for new project node
* it provides a hook to allow other modules to add a link to that view by implementing
* hook_
*/
function _erpal_projects_helper_view_projects_header_content()
{
  $q = current_path();
  $add_erpal_project =  _erpal_projects_helper_create_project_link();
  
  $my_content = array(
    $add_erpal_project,
  );
  
  //ask all other modules for content in the header area of the view
  $other_module_content = module_invoke_all('view_projects_header_content');
  
  $all_content = array_merge($other_module_content, $my_content);
  
  $content = '';
  foreach ($all_content as $a_content) {
    $content .= '<br>'.$a_content;
  }
  
  return $content;
}

/**
* Implements hook_node_presave
*/
function erpal_projects_helper_node_presave($node) {
  $type = $node->type;
 
  if ($type == 'erpal_timetracking') {
    erpal_projects_helper_node_presave_timetracking($node);
  }

  if ($type == 'erpal_task') {    
    erpal_projects_helper_node_presave_task($node);        
  }
  
  if ($type == 'erpal_project') {    
    erpal_projects_helper_node_presave_project($node);        
  }
}


/**
* Helper function to create new project link
*/
function _erpal_projects_helper_create_project_link($q_arg = false, $query_arr = array())
{
  if (!$q_arg)
    $q = current_path();
  else 
    $q = $q_arg;
  
  if (!isset($query_arr['destination']) || $q_arg)
    $query_arr['destination'] = $q;
  
  return l(
    t("Create new project"), "node/add/erpal-project", array(
        'query' => $query_arr,
    )
  );
}

/**
* Returns all projects visible for the user
*/
function _erpal_projects_helper_get_projects() {
  $projects = array();
  
  //first get all book pages
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'erpal_project')
  ->propertyCondition('status', 1)
  //->propertyOrderBy('title', 'asc') //order alphabetic
  ->execute();
  
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $projects = _erpal_basic_helper_node_titles($nids);
  }
  
  return $projects;
}

/**
* returns the activity to a given node if the node is a erpal_task or erpal_project
*/
function _erpal_projects_helper_get_activity($node) {
  if ($node->type == 'erpal_task')
    return _erpal_projects_helper_get_activity_by_task($node);
  if ($node->type == 'erpal_project')
    return _erpal_projects_helper_get_activity_by_project($node);
  
}