<?php
/**
 * @file
 * Code for the erpal_calendar_helper module.
 */
module_load_include('inc', 'erpal_calendar_helper', 'inc/config');

/**
 * Implements hook_menu
 */ 
function erpal_calendar_helper_menu(){

	$items = array();
  
  require_once 'inc/config.inc';
  $config_items = _erpal_calendar_helper_config_menu();
  
  $items = array_merge($items, $config_items);
  return $items;
} 

/**
 * Implements hook_permission
 */
function erpal_calendar_helper_permission(){
  return array(
    'config erpal calendar' => array(
      'title' => t('Administer ERPAL calendar'), 
      'description' => t('Perform administration tasks for ERPAL calendar module.'),
    ),
    'access calendar view' => array(
      'title' => t('Access calendar view'), 
      'description' => t('Grant the user access to the calendar view.'),
    ),
  );
	
}

/**
* Implements date_item_presave provided by date item module, if a date item is about to be saved
*/
function erpal_calendar_helper_date_item_presave($date_item) {
  _erpal_calendar_helper_set_tag($date_item);
}

/**
* set a tag to the entity if one should be set
*/
function _erpal_calendar_helper_set_tag($date_item) {
  $current_tags = isset($date_item->field_date_item_tags[LANGUAGE_NONE]) ? $date_item->field_date_item_tags[LANGUAGE_NONE] : array();

  $src_type = $date_item->src_type;
  $src_entity = $date_item->src_entity();
  $src_bundle = _date_entity_entity_bundle($src_entity, $src_type);
  $src_field_name = $date_item->src_field_name;
  $term_to_set = _erpal_calendar_helper_field_tag($src_type, $src_bundle, $src_field_name);

  //allow other modules to alter the set term. In case of a erpal_date node, we want another term if the date node is not e real date but a holiday
  $context = array('src' => array('type' => $src_type, 'bundle' => $src_bundle, 'entity' => $src_entity));
  drupal_alter('date_term', $term_to_set, $context);
  
  if (!$term_to_set)
    return;  //no term to set!
  
  $tag_is_set = false;
  foreach ($current_tags as $delta => $term_arr) {
    if (isset($term_arr['name']) && $term_arr['name'] == $term_to_set) {
      $tag_is_set = true;
    }    
  }

  if (!$tag_is_set) {
 
    //get field instance to get vocabulary of term refernce field
    $instance = field_info_field('field_date_item_tags');

    $vocab_machine_name = $instance['settings']['allowed_values'][0]['vocabulary'];
    //now get the vocabulary id from the vocabulary machine name
    $vocabs = taxonomy_get_vocabularies();
    $vid = false;
    foreach ($vocabs as $vocab) {
      if ($vocab->machine_name == $vocab_machine_name) {
        $vid = $vocab->vid;
        break;
      }
    }
    
    if (!$vid)
      return;  //bad! no vid found?!

    //get the tid of the term
    $term = taxonomy_get_term_by_name($term_to_set, $vocab_machine_name);
    if (!count($term)) {
      $term = false; 
    } else {
      $tid = array_keys($term);
      $tid = $tid[0];
      $term = $term[$tid];
    }

    //if term not exists, add it
    if (!$term && $term_to_set) {
      //@TODO
      $term = new stdClass();
      $term->name = $term_to_set;
      $term->vid = $vid;
      
      taxonomy_term_save($term);      
    }    

    $date_item->field_date_item_tags[LANGUAGE_NONE][0]['tid'] = $term->tid;
  }
  
}

/**
* Returns all date_item entities with a subject of type = holiday in field_date_type, which means that this date item entity is tagged with the tag used in settings of this module for holidays
* @param $date_only if set the result array contains only the dates, otherwise the complete date_item entity is returned
*/
function erpal_calendar_get_holidays($year, $month) {
  /*$days = array();
	$monthNull = str_pad($month, 2 ,'0', STR_PAD_LEFT);
	$ldom = erpal_calendar_ldom($month, $year);  //last day of month
	$range_from = "$year-$monthNull-01 00:00:00";
	$range_till = "$ldom 23:59:59";
	$res = db_query('SELECT d.field_termin_date_value AS adate FROM {content_type_termin} t LEFT JOIN {content_field_termin_date} d ON t.vid=d.vid WHERE field_termin_typ_value=4 AND field_termin_date_value >= "%s" AND field_termin_date_value <= "%s"', $range_from, $range_till);
	while ($tag = db_fetch_array($res))
	{
		$adate = $tag['adate'];
		$days[] = $adate;
	}
	
  ACHTUNG: WIR MÜSSEN immer die range eines entites berücksichtigen, nicht nur das Start- oder Enddatum, Weihnachten geht über mehrere Tage!
	
	return $days;*/
}

/**
* Implements hook_date_term_alter to alter a term set on an date_item entity. This hook is provided by the erpal_calendar_helper module.
* @param $term_string the string that should be set as tag to the entity given in $context
*/
function erpal_calendar_helper_date_term_alter(&$term_string, $context) {
  $entity_type = $context['src']['type'];
  $bundle = $context['src']['bundle'];
  $entity = $context['src']['entity'];
  
  if ($entity_type == 'node' && $bundle == 'erpal_date') {
    $date_type = isset($entity->field_date_type[LANGUAGE_NONE][0]['value']);

    if ($date_type == 'holiday')
      $term_string = _erpal_calendar_helper_field_tag_holiday_date();
  }
}

/**
* Returns the term_string that should be set for user holidays
*/
function _erpal_calendar_helper_field_tag_holiday_date() {
  return variable_get('erpal_calendar_user_holiday_string', 'holiday');
}

/**
* Return the last day of a given month
*/
function erpal_calendar_ldom($month = '', $year = '') {
   if (empty($month)) {
    $month = date('m');
   }
   if (empty($year)) {
    $year = date('Y');
   }
   $result = strtotime("{$year}-{$month}-01");
   $result = strtotime('-1 second', strtotime('+1 month', $result));
   return date('Y-m-d', $result);
}
