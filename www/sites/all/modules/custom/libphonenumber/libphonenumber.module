<?php

/*
* Implements hook_init
*/
function libphonenumber_init() {

}

function _libphonenumber_parse($phone_number, $region) {
  $phone_util = PhoneNumberUtil::getInstance();
  try {
      return $phone_util->parse($phone_number, $region);
  } catch (NumberParseException $e) {
      // TODO: specify error
      return false;
  }
}

function libphonenumber_is_valid($phone_number, $region = "DE") {
  $phone_util = PhoneNumberUtil::getInstance();
  $number_proto = _libphonenumber_parse($phone_number, $region);
  if($number_proto == false) return false;
  $is_valid = $phone_util->isValidNumber($number_proto);
  return $is_valid;
}

function libphonenumber_format($phone_number, $format = PhoneNumberFormat::NATIONAL, $region = "DE") {
  //dpm("libphonenumber_format: " . $phone_number);
  $phone_util = PhoneNumberUtil::getInstance();
  $number_proto = _libphonenumber_parse($phone_number, $region);
  var_dump($number_proto);
  $number_formatted = $phone_util->format($number_proto, $format) . PHP_EOL;
  //dpm("libphonenumber_format: " . $number_formatted);
  return $number_formatted;
}

function libphonenumber_is_number_match($phone_number_a, $phone_number_b, $region = "DE") {
  $number_a_formatted = libphonenumber_format($phone_number_a, PhoneNumberFormat::E164, $region);
  $number_b_formatted = libphonenumber_format($phone_number_b, PhoneNumberFormat::E164, $region);
  return ($number_a_formatted == $number_b_formatted);
  // PhoneNumberFormat:: NATIONAL, E164, INTERNATIONAL, RFC3966
}

function libphonenumber_entity_update($entity, $type) {
  //dpm($entity);
  //dpm($type);
  if($type == 'field_collection_item' && $entity->field_name == 'field_phone') {
    $phone_number = $entity->field_phone_number[LANGUAGE_NONE][0]['value'];
    //dpm($entity->field_phone_number_normali[LANGUAGE_NONE]);
    if(!isset($entity->field_phone_number_normali[LANGUAGE_NONE][0])) $phone_number_normalized_old = "";
    else $phone_number_normalized_old = $entity->field_phone_number_normali[LANGUAGE_NONE][0]['value'];
    $phone_number_normalized =  libphonenumber_format($phone_number);
    //dpm($phone_number);
    //dpm($phone_number_normalized);
    if($phone_number_normalized != $phone_number_normalized_old) {
      //dpm($phone_number_normalized);
      $entity->field_phone_number_normali[LANGUAGE_NONE][0]['value'] = $phone_number_normalized;
      $entity->save(TRUE);
    }
  }
  
  
  //$entity_id = $node->field_phone[LANGUAGE_NONE][0]['value'];
  //$entity = entity_load_single('field_collection_item', $entity_id);
  //dpm($entity);
  /*$phone_number = $entity->field_phone_number[LANGUAGE_NONE][0]['value'];
  $phone_number_normalized =  libphonenumber_format($phone_number);
  //dpm(libphonenumber_format($phone_number));
  $entity->field_phone_number_normalized[LANGUAGE_NONE][0]['value'] = $phone_number_normalized;
  $entity->save(TRUE);*/
  //dpm($entity);
  
}