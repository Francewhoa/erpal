<?php
/**
 * @file
 * Code for the fileedit module.
 */

/**
* Implements hook_menu
*/ 
function fileedit_menu(){

  $items = array();
  
  $items['fileedit/edit/%'] = array(
    'page callback' => 'fileedit_edit',
    'page arguments' => array(2),
    'access callback' => 'fileedit_edit_access',
    'access arguments' => array(2),    //fid
    'type' => MENU_CALLBACK,
  );
  
  $items['fileedit/upload/%/%'] = array(
    'page callback' => 'fileedit_upload',
    'page arguments' => array(2),
    'access callback' => 'fileedit_upload_access',
    'access arguments' => array(2,3),    //fid, session ID
    'type' => MENU_CALLBACK,
  );
  
  $items['fileedit/download/%/%'] = array(
    'page callback' => 'fileedit_download',
    'page arguments' => array(2),
    'access callback' => 'fileedit_download_access',
    'access arguments' => array(2,3),    //fid, session ID
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}
  
/**
* Implements hook_permission
*/
function fileedit_permission(){
  return array(
    'use file edit' => array(
      'title' => t('Allow edit files local'), 
      'description' => t('Shows an edit button on each file to edit it local'),
    ),
  );
}

/**
* implements hook_theme
*/
function fileedit_theme() {
  return array(
    'fileedit_xml' => array(
      'variables' => array('file' => false, 'args' => array()),
      'template' => 'fileedit_xml',
    )
  );
}

/**
* Access Callback URL for downloading URL
*/
function fileedit_download_access($fid, $sid) {
  //user must have a valid session ID
  $auser = _fileedit_user_by_sid($sid);
  
  if (!is_object($auser))
    return false;

  return _fileedit_file_edit_allowed($fid, $auser);
}

/**
* Access Callback for Edit Request
*/
function fileedit_edit_access($fid) {
  $general_access = user_access('use file edit');
  
  if (!$general_access)
    return false;
  
  return _fileedit_file_edit_allowed($fid);
}

/**
* Callback for Edit Request
*/
function fileedit_edit($fid) {    
  header('Content-type: application/x-java-jnlp-file');
  header('Pragma: no-cache');
  header('Expires: 0');
  
  //and then return the xml file
  $xml = _fileedit_get_edit_xml($fid);
  die($xml);
}

/**
* Callback URL for downloading URL
*/
function fileedit_download($fid) {
  //dass es die Datei wirklich gibt, und wir hier auch Zugriff rauf haben
  //wurde schon in der fileedit_upload_access festgestellt!
  //ok die Datei gibt es wirklich!
  
  $file = file_load($fid);
  
  $headers = array(
    'Content-Type'              => 'force-download',
    'Content-Disposition'       => 'attachment; filename="' . $file->filename . '"',
    'Content-Length'            => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma'                    => 'no-cache',
    'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
    'Expires'                   => '0',
    'Accept-Ranges'             => 'bytes'
  );

  file_transfer($file->uri, $headers);

}

/**
* Callback URL for uploading URL
*/
function fileedit_upload($fid) {
  //@todo
  print_r($_FILES);
  die('upload');
}

/**
* Access Callback URL for uploading URL
*/
function fileedit_upload_access($fid, $sid) {
  
  //user must have a valid session ID
  $auser = _fileedit_user_by_sid($sid);

  if (!is_object($auser))
    return false;
  
  return _fileedit_file_edit_allowed($fid, $auser);
}

/**
* Checks if the user has rights to edit this file
*/
function _fileedit_file_edit_allowed($fid, $auser=false) {
  if (!$auser) {
    global $user;
    $auser = $user;
  }

  if (!user_access('use file edit', $auser))
    return false;  //use has no rights, so change nothing here

  $fid  = intval($fid);
  $file = file_load($fid);

  //@TODO: prüfen dass der user nicht nur laden sondern auch speichern / editieren darf!!
  
  if (empty($fid) || empty($file) || !$file->status) {
    return false;
  }
  
  //@todo wirklich prüfen, ob der user genau diese Datei auch bearbeiten darf!
  
  return true;  
}

/**
* Implements hook_theme_registry_alter
*/
function fileedit_theme_registry_alter(&$registry) {
  
  $registry['file_link']['preprocess functions'][] = 'fileedit_file_link_preprocess';
  $registry['file_link']['function'] = 'theme_file_link_fileedit';
}

/**
* Preprocess function für file_link theme
*/
function fileedit_file_link_preprocess(&$variables) {
  global $user;
  $file = $variables['file'];

  if (!_fileedit_file_edit_allowed($file->fid))
    return;  //use has no rights, so change nothing here
  
  //add the link to edit the file!
  
  $edit_url = _fileedit_edit_url($file);
  $variables['edit_url'] = $edit_url;
}

function _fileedit_get_edit_xml($file) {
  
  global $user;
  $module_path = drupal_get_path('module', 'fileedit');
  $upload_url = $module_path.'/';
  
  //perhaps it is a file id only
  if (!is_object($file))
    $file = file_load($file);
  
  $args = _fileedit_get_jar_urls();
  $args['arguments']['download'] = _fileedit_download_url($file)."/".$user->sid;
  $args['arguments']['upload'] = _fileedit_upload_url($file)."/".$user->sid;
  $args['arguments']['session'] = $user->sid;
  $args['arguments']['fid'] = $file->fid;
  $args['arguments']['filename'] = $file->filename;
  $xml = theme('fileedit_xml', array('file' => $file, 'args' => $args));
  $xml = '<?xml version="1.0" encoding="UTF-8"?>'.$xml;  //wen wir das mit in die tpl Datei packen, gibt das ein Fehler
  
  return $xml;
}

/**
* Return the download URL
*/
function _fileedit_download_url($file) {
  return url('fileedit/download/'.$file->fid, array('absolute' => true));
}

/**
* Return the download URL
*/
function _fileedit_upload_url($file) {
  return url('fileedit/upload/'.$file->fid, array('absolute' => true));
}

/**
* Return the edit URL
*/
function _fileedit_edit_url($file) {
  return url('fileedit/edit/'.$file->fid, array('absolute' => true));
}

/**
* returns the URLs to the jar files neede for fileedit
*/
function _fileedit_get_jar_urls() {
  
  $module_path = drupal_get_path('module', 'fileedit');
  return array(
    'commons_logging_jar_url' => url($module_path.'/jar/commons-logging-1.1.1.jar', array('absolute' => true)),
    'httpclient_jar_url' => url($module_path.'/jar/httpclient-4.1.2.jar', array('absolute' => true)),
    'httpcore_jar_url' => url($module_path.'/jar/httpcore-4.1.2.jar', array('absolute' => true)),
    'filehandler_jar_url' => url($module_path.'/jar/FileHandler.jar', array('absolute' => true)),
    'httpmime_jar_url' => url($module_path.'/jar/httpmime-4.1.2.jar', array('absolute' => true)),
  );
}

/**
* theming function top theme a file link with fileedit
*/
function theme_file_link_fileedit(&$variables) {
    
  
  $edit_link = '';
  $edit_url = '';
  if (isset($variables['edit_url'])) {
    $edit_url = $variables['edit_url'];  
    $edit_link = l(t('EDIT'), $edit_url);
  }
      
  return theme_file_link($variables).$edit_link;
}

/**
* returns the User logged in with a session ID
* @see mostly copied from session.inc _drupal_session_read()
*/
function _fileedit_user_by_sid($sid) {

  global $is_https;

  // Write and Close handlers are called after destructing objects
  // since PHP 5.0.5.
  // Thus destructors can use sessions but session handler can't use objects.
  // So we are moving session closure before destructing objects.
  drupal_register_shutdown_function('session_write_close');


  // Otherwise, if the session is still active, we have a record of the
  // client's session in the database. If it's HTTPS then we are either have
  // a HTTPS session or we are about to log in so we check the sessions table
  // for an anonymous session with the non-HTTPS-only cookie.
  if ($is_https) {
    $user = db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.ssid = :ssid", array(':ssid' => $sid))->fetchObject();
    if (!$user) {
      if (isset($_COOKIE[$insecure_session_name])) {
        $user = db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = :sid AND s.uid = 0", array(
          ':sid' => $_COOKIE[$insecure_session_name],
        ))
        ->fetchObject();
      }
    }
  }
  else {
    $user = db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = :sid", array(':sid' => $sid))->fetchObject();
  }
  
  return $user;
}