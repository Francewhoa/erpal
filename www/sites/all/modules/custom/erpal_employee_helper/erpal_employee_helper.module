<?php
/**
 * @file
 * Code for the erpal_employee_helper module.
 */
module_load_include('inc', 'erpal_employee_helper', 'inc/config');
module_load_include('inc', 'erpal_employee_helper', 'inc/working_times.entity');
module_load_include('inc', 'erpal_employee_helper', 'inc/working_times.calc');

/**
 * Implements hook_menu
 */ 
function erpal_employee_helper_menu(){

	$items = array();
  
  require_once 'inc/config.inc';
  $config_items = _erpal_employee_helper_config_menu();
  
  $items['employee/test'] = array(
    'page callback' => '_erpal_employee_helper_test',
    'access callback' => '_erpal_employee_helper_test_access',
  );
  
  $items = array_merge($items, $config_items);
  return $items;
} 

//########### ONLY FOR TEST AND DEBUGGING ############
function _erpal_employee_helper_test() {
  _erpal_employee_helper_calculate_working_times();
}

function _erpal_employee_helper_test_access() {
  global $user;
  return $user->uid == 1;
}
//####################################################

/**
* Implements hook_cron
*/
function erpal_employee_helper_cron() {
  _erpal_employee_helper_calculate_working_times();
}

/**
* Implements hook_entity_info to define own entities
*/
function erpal_employee_helper_entity_info() {
  $return['working_times'] = array(
    'label' => t('Calculated working times'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'WorkingTimes',
    'controller class' => 'WorkingTimesController',
    'base table' => 'working_times',
    'file' => 'inc/working_times.entity.inc',
    'fieldable' => false,
    'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
    ),
    'bundles' => array(
      'year'=> array(),
      'month'=> array(),
      'offset'=> array(),
    ),
    'label callback' => 'entity_class_label',
    //'uri callback' => 'entity_class_uri',  //not accessible
    'creation callback' => 'working_times_create',
    'access callback' => 'working_times_access',
    'module' => 'erpal_employee_helper',
    // The information below is used by the BillableUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/working_times',
      'file' => 'working_times.entity.inc',
      'controller class' => 'WorkingTimesUIController',
      'menu wildcard' => '%working_times',
    ),
    
  );

  return $return;
}

/**
 * Determines whether the given user has access to a billable.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $billable
 *   Optionally a billable or a billable type to check access for. If nothing is
 *   given, access for all billables is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function working_times_access($op, $working_times = NULL, $account = NULL) {
 
  return user_access($op.' working times offset');

}

/**
* Implements hook_node_update
*/
function erpal_employee_helper_node_update($node) {
  if ($node->type == 'erpal_working_time') {
    _erpal_employee_helper_invalidate($node);
  }
}

/**
* Implements hook_node_delete
*/
function erpal_employee_helper_node_delete($node) {
  if ($node->type == 'erpal_working_time') {
    _erpal_employee_helper_invalidate($node);
  }
}

/**
* Implements hook_node_insert
*/
function erpal_employee_helper_node_insert($node) {
  if ($node->type == 'erpal_working_time') {
    _erpal_employee_helper_invalidate($node);
  }
}

/**
* Set all datasets "dirty" that are in the booking date of this working time node
*/
function _erpal_employee_helper_invalidate($node) {
  $booking_time = $node->field_date_time[LANGUAGE_NONE][0]['value'];
  $uid = $node->uid;
  $month = date('m', $booking_time);
  $year = date('Y', $booking_time);
  
  //loop through all working_times till the current month
  $current_year = date('Y');
  $current_month = date('m');
  for($y=$year; $y<=$current_year; $y++) {
    if ($y==$year) //on first loop start with the month of the node
      $m_start = $month;
    else
      $m_start = 1; //otherwise begin at the first month
   
    for($m=$m_start; $m<=12; $m++) {
      //get the year working_times
      $working_times_entities = working_times_load_by_user('year', $uid, $year);
      foreach ($working_times_entities as $working_times) {
        $working_times->dirty = 1; 
        $working_times->save();
      }
      
      //get the month working_times
      $working_times_entities = working_times_load_by_user('month', $uid, $year, $month);
      foreach ($working_times_entities as $working_times) {
        $working_times->dirty = 1; 
        $working_times->save();
      }
    }
  }
  
  
}
/**
* Implements hook_permission
*/
function erpal_employee_helper_permission() {
  return array(
    'config erpal employee' => array(
      'title' => t('Config ERPAL employee settings'), 
      'description' => t('Allows the user to configure ERPAL employee module settings'),
    ), 
    'create working times offset' => array(
      'title' => t('Creating working times offset'), 
      'description' => t('Allows the user to create working times offset entities'),
    ), 
    'edit working times offset' => array(
      'title' => t('Edit working times offset'), 
      'description' => t('Allows the user to edit working times offset entities'),
    ), 
    'delete working times offset' => array(
      'title' => t('Delete working times offset'), 
      'description' => t('Allows the user to delete working times offset entities'),
    ), 
  );
}

/**
* callback to calculate the duration if a working time node
*/
function computed_field_field_duration_calc_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $date_field = $entity->field_date_time[LANGUAGE_NONE][0];
  $working_time_sec = $date_field['value2'] - $date_field['value'];
  
  //now substract the breaks
  $breaks = $entity->field_date_times[LANGUAGE_NONE];
  $total_break_sec = 0;
  foreach ($breaks as $delta=>$value) {
    $from = $value['value'];
    $till = $value['value2'];
    $break_sec = $till - $from;
    $total_break_sec += $break_sec;
  }
  
  $time_decimal = round(($working_time_sec - $total_break_sec) / (60 * 60), 2); //time in hours
  $entity_field[0]['value'] = $time_decimal;
}

/**
*  Callback to set the display of a calculated duration of a working time node
*/
function computed_field_field_duration_calc_display($field, $entity_field_item, $entity_lang, $langcode) {
  
  $value = $entity_field_item['value'];
  $whole = floor($value);      // full part
  $decimal_part = $value - $whole; // decimal part
  //get decimal part in minutes
  
  $minutes = round(60 * $decimal_part);
  return $whole.':'.$minutes.' '.t('hours');
}