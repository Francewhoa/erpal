<?php

/**
 * Implements of hook_views_api().
 */
function views_jstree_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'views_jstree'),
  );
}

/**
* Implements hook_menu
*/
function views_jstree_menu() {
  $items = array();
  $items['jstree/load/%/%'] = array(
    'page callback' => 'views_jstree_load_children',
    'page arguments' => array(2,3), //2=view, 3=parent_id
    'access callback' => 'views_jstree_load_children_access',
    'access arguments' => array(2,3),
  );

  return $items;
}

function views_jstree_require_jstree() {
  //include the jstree with the library module
  $jstree_path = libraries_get_path('jstree');

  //if not exists, warn the user!
  $jstree_download = l('latest jstree', 'http://www.jstree.com');
  $jstree_root = $jstree_path;
  if (!file_exists($jstree_path."/jquery.jstree.js")) {
    drupal_set_message(t('Please download !jstree_download and place files from package in !jstree_root', array('!jstree_download' => $jstree_download, '!jstree_root' => $jstree_root)), 'warning');
  }
  
  //add jstree Javascript and all its components
  drupal_add_js($jstree_path."/_lib/jquery.cookie.js");
  drupal_add_js($jstree_path."/_lib/jquery.hotkeys.js");
  drupal_add_js($jstree_path."/jquery.jstree.js");
  //drupal_add_js($jstree_path."/_docs/syntax/!style.css");
  //drupal_add_js($jstree_path."/_docs/!style.css");
  //drupal_add_js($jstree_path."/_docs/syntax/!script.js");
  
}

/**
 * Implements of hook_theme().
 */
function views_jstree_theme($existing, $type, $theme, $path) {
  return array(
    //the js tree
    'views_jstree' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
      ),
    ),
    //the inner tree node style
    'views_jstree_inner' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
        'result' => array(),
        'parent' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for the jstree style plugin.
 *
 * We need to do some weirdness that makes more sense as a theme function
 * than as a template.
 *
 * @ingroup themeable
 * @link http://drupal.org/node/355919
 */
function theme_views_jstree($variables) {
  
  views_jstree_require_jstree();
  //dpm($variables);
  $view = $variables['view'];
  $options = $variables['options'];
  $rows = $variables['rows'];
  $title = $variables['title'];

  $result = $view->result;
  $fields = &$view->field;

  $parents = array();

  if (! $fields[$options['id_field']] instanceof views_handler_field) {
    drupal_set_message(t('ID field is invalid: %field', array('%field' => $options['id_field'])), 'error');
    return '';
  }

  if (! $fields[$options['parent_field']] instanceof views_handler_field) {
    drupal_set_message(t('Parent field is invalid: %field', array('%field' => $options['parent_field'])), 'error');
    return '';
  }
  
  //now we show the first nodes at top level here, other nodes are reloaded by ajax in the tree  
  $nid = $view->args[0];
  $id = 'views_jstree_'.$nid;
  $view_name = $view->name;
  //add javascript variables
  $ajax_url = url("jstree/load/$view_name");

  $jstree_options = array();
  $jstree_options[$id] = array('parent_nid' => $nid, 'ajax_url' => $ajax_url);
  drupal_add_js(array('jstree_options' => $jstree_options), 'setting');
  
  $mod_path = drupal_get_path('module', 'views_jstree');
  drupal_add_js($mod_path."/js/views_jstree.js");
  
  //@TODO in eigene Templatefunktion!
  //@TODO größe so viel wie Platz ist! (100%)
  $width = 900;  
  $height = 600;
  return '<div id="'.$id.'" class="jstree" style="height:'.$height.'px; width:'.$width.'px !important;">test</div>';
 
}

/**
 * Inner recursive theme function for views tree theming.
 *
 * @ingroup themeable
 * @param $view
 * @param $options
 * @param $row
 * @param $title
 * @param $result
 *   An array representing the raw data returned from the query.
 * @param $parent
 *   The id of the parent entry in the call stack.
 */
function theme_views_jstree_inner($variables) {
  $view = $variables['view'];
  $options = $variables['options'];
  $rows = $variables['rows'];
  $title = $variables['title'];
  $result = $variables['result'];
  $parent = $variables['parent'];

  $items = array();
  foreach ($result as $i => $record) {
    if ($record->views_jstree_parent == $parent) {
      $variables['parent'] = $record->views_jstree_main;
      $items[] = $rows[$i] . call_user_func(__FUNCTION__, $variables);
    }
  }
  return count($items) ? theme('item_list', array('items' => $items, 'type' => $options['type'])) : '';
}

/**
* Access callback for ajax loading of view_data
*/
function views_jstree_load_children_access() {
  return true; //@TODO implement access validation, maybe use permissions set on view!
}

/**
* AJAX Callback functions for loading tree children
*/
function views_jstree_load_children($view_name, $parent_id) {

  $view = views_get_view($view_name);
  if (!is_object($view))
    return array();
    
  $children_display = _views_jstree_get_children_display($view);
  //execute it and return data as json
  $args = array($parent_id);
  $view->preview($children_display->id, $args);
  
  $result = $view->result;
  
  //output result as json to display in jstree
  $output = array();
  $status = 'TODO';  //@todo set status if needed, todo abstract for tasks and all other types!, should be done in row plugin!
  foreach($result as $delta=>$row) {        
    //Execute next view to see if it hase some children!
    
    $subargs = array($row->nid);
    $subview = views_get_view($view_name);
    $subview->preview($children_display->id, $subargs);
    $hasChildren = $subview->total_rows > 0;
    //@TODO Views row style plugin? No hard coded row style format!
    $output[] = array(
      "attr" => array("id" => "node_".$row->nid, "rel" => 'task-'.$status, "type" => $row->node_type), 
      "data" => $row->node_title,
      "state" => $hasChildren ? "closed" : '', //or '' if no Children!
    );
  }
  
  die(json_encode($output));
}

/**
* Return the view displaying the children using the ajax allback related to the given view
* @param a view which contains the display to get children
*/
function _views_jstree_get_children_display($view) {
  //@TODO make dynamic options in view to select the child view displaying ajax children
  $display = false;
  foreach($view->display as $display_id=>$display) {
    $display_options = $display->display_options;
    if (isset($display_options['style_options']['ajax_child_view']))
      if ($display_options['style_options']['ajax_child_view']) {
        //that ist the display!
        return $display;
      }
    
  }
  
  return $display;
}

/**
 * Code mostly taken from views_tree module, THANKS!
 *
 * Normalize a value out of the record to an int.
 *
 * If the field in question comes from Field API, then it will be an array, not
 * an int.  We need to detect that and extract the int value we want from it.
 * Note that because Field API structures are so free-form, we have to specifically
 * support each field type.  For right now we support entityreference (target_id),
 * nodereference (nid), userreference (uid), and taxonomyreference (tid).
 *
 * @param mixed $value
 *   The value to normalize.  It should be either an int or an array. If an int,
 *   it is returned unaltered.  If it's an array, we extract the int we want
 *   and return that.
 * @param views_handler_field $field
 *   Metadata about the field we are extracting information from.
 * @return int
 *   The value of this key, normalized to an int.
 */
function views_jstree_normalize_key($value, views_handler_field $field) {
  if (is_array($value) && count($value)) {
    if (isset($field->field_info['columns'])) {
      $columns = array_keys($field->field_info['columns']);
      foreach ($columns as $column) {
        if (in_array($column, array('target_id', 'nid', 'uid', 'tid'))) {
          $field_property = $column;
          break;
        }
      }
    }
    else {
      $field_property = '';
    }
    return $field_property ? $value[0][$field_property] : 0;
  }
  else {
    return $value ? $value : 0;
  }
}
