<?php
/**
 * @file
 * Code for the erpal_invoice_helper module.
 */
module_load_include('inc', 'erpal_invoice_helper', 'inc/views_links');
module_load_include('inc', 'erpal_invoice_helper', 'inc/actions');
module_load_include('inc', 'erpal_invoice_helper', 'inc/config');
module_load_include('inc', 'erpal_invoice_helper', 'inc/helper');
module_load_include('inc', 'erpal_invoice_helper', 'inc/invoice.calc');
module_load_include('inc', 'erpal_invoice_helper', 'inc/token');
module_load_include('inc', 'erpal_invoice_helper', 'inc/billables.elements');

/**
 * Implements hook_action_info().
 */
function erpal_invoice_helper_action_info() {
  return array(
    'erpal_invoice_helper_invoice_from_billables_action' => array(
      'type' => 'entity',
      'label' => t('Create invoice'),
      'description' => t('Creates an invoice from billables'),
      'configurable' => TRUE,
      'hooks' => array(),
      'aggregate' => TRUE,
    ),
  ); 
}

/**
* Implements hook_theme
*/
function erpal_invoice_helper_theme() {
  return array(
    'invoice_pdf_html' => array(
      'variables' => array('invoice' => false),
      'template' => 'template/invoice_pdf_html',
    ),
    'invoice_attachment_pdf_html' => array(
      'variables' => array('invoice' => false, 'billables' => array()),
      'template' => 'template/invoice_attachment_pdf_html',
    ),    
  );
}

/**
* implements hook_init
*/
function erpal_invoice_helper_init() {
  //@TODO that is really bad, but we have no other chance right now. The problem is:
  //if the customer changes in an invoice, we change the allowed values using #ajax at the customer
  //form element. This ajax function sumbits the whole form. While rebuilding the form again, the function
  //to get the allowed values of the field is called bevore hook_form_alter. But we need the value of the selected customer
  //to decide which are the allowed values. So we need a oportunity to get the value of the customer field BEVORE 
  //the function for allowed values is called. This is what we do here.
  
  if (isset($_POST['field_customer_ref']))
    if (isset($_POST['field_customer_ref'][LANGUAGE_NONE]))
      if (isset($_POST['field_customer_ref'][LANGUAGE_NONE][0]))
        if (isset($_POST['field_customer_ref'][LANGUAGE_NONE][0]['nid'])) {
          $customer_nid = $_POST['field_customer_ref'][LANGUAGE_NONE][0]['nid'];
          $customer_nid = _erpal_basic_helper_get_nid_from_autocomplete_string($customer_nid);
          _erpal_invoice_helper_cache('erpal_ajax_adresses', $customer_nid);
        }
}

/**
* Implements hook_form_alter
*/
function erpal_invoice_helper_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'node_delete_confirm') {
    if (arg(0) == 'node') {
      $node = node_load($form['nid']['#value']);
      if ($node->type == 'erpal_invoice') {
        //add a checkbox to the confirmation form to let  the user decide wether to unbill all entities or not
        $form['unbill_billables'] = array(
          '#type' => 'checkbox',
          '#title' => t('Set all billables of this invoice to "not billed"'),
          '#default_value' => true,          
        );
        
        //save the billable ids to modify in the form, because ofter submitting the confirm delete dialog, we cannot
        //load the invoice again to geht the billables
        $billables_id_arr = array();
        $billables_ids = $node->field_billables_ref[LANGUAGE_NONE];
        foreach ($node->field_billables_ref[LANGUAGE_NONE] as $delta=>$billable_id) {
          $billables_id_arr[] = $billable_id['target_id'];
        }
        
        $form['billable_ids'] = array(
          '#type' => 'value',
          '#value' => serialize($billables_id_arr),
        );
        
        $form['#submit'][] = '_erpal_invoice_helper_confirm_delete_invoice_submit';
      }
        
    }
  }
  
  if ($form_id == 'erpal_invoice_node_form') {    
    _erpal_invoice_helper_invoice_node_form_alter($form, $form_state); 
  }
  
  //set default value for contractor in billable node edit form
  if ($form_id == 'billable_edit_form') {
    //set contractor to "own company" if field is empty
    $contractor_nid = false;    
    if (isset($form['contractor_nid'])) {
      $contractor_nid = $form['contractor_nid']['#default_value'];
    }

    if (!$contractor_nid) {
      $company_nid = _erpal_basic_helper_get_own_company_nid(false);     
      $form['contractor_nid']['#default_value'] = $company_nid;
    }
    
    //set the default vat rate and the default currency
    $form['currency']['#default_value'] = _erpal_invoice_helper_get_default_currency();
    $form['vat_rate']['#default_value'] = _erpal_invoice_helper_get_default_vat_rate();
  }
}

/**
* Function altering the erpal_invoice node form
*/
function _erpal_invoice_helper_invoice_node_form_alter(&$form, &$form_state) {
  $form['field_invoice_address_id'][LANGUAGE_NONE]['#prefix'] = '<div id="invoice_address_wrapper">';
  $form['field_invoice_address_id'][LANGUAGE_NONE]['#suffix'] = '</div>';

  $form['field_customer_ref'] = _erpal_invice_helper_field_customer_ref_alter($form['field_customer_ref']);
  
  $form['#submit'] = array_merge(array('_erpal_invoice_helper_invoice_form_submit'), $form['#submit']);
  
  //if address has only one option, make this option the default value
  $options = $form['field_invoice_address_id'][LANGUAGE_NONE]['#options'];
  $default_id = false;
  if (count($options) == 2) {
    //get the one that is not "_none" and delete it!    
    foreach ($options as $id=>$value) {
      if (!is_numeric($id))
        unset($form['field_invoice_address_id'][LANGUAGE_NONE]['#options'][$id]);
    }
  }
  if ($default_id) {
    $form['field_invoice_address_id'][LANGUAGE_NONE]['#default_value'] = $default_id;
  }
  
  //if has no nid copy notes from defaults in admin settings if erpal_invoice
  if (!$form['nid']['#value']) {
    $manual_notes = _erpal_invoice_helper_get_manuall_notes();
    //add these manual notes to the text area
    $form['field_note'][LANGUAGE_NONE][0]['value']['#default_value'] = $manual_notes;
  }

  //add available tokens to the form
  //show available Tokens  
  if (module_exists('token')) {
    $form['token_tree'] = array(
      '#theme' => 'token_tree',   
      '#token_types' => array('erpal_invoice'),
      '#global_types' => FALSE,
      '#click_insert' => TRUE,
      '#recursion_limit' => 1,
    );
  }
  
  //add token information for order numbers
  if (module_exists('token')) {
    $form['order_numbers_token_tree'] = array(
      '#theme' => 'token_tree',   
      '#token_types' => array('erpal_invoice_referenced_data'),
      '#global_types' => FALSE,
      '#click_insert' => TRUE,
      '#recursion_limit' => 1,
      '#weight' => 10,
    );
    
    $form['#group_children']['order_numbers_token_tree'] = 'group_order_numbers';
  }
  
  //set contractor to "own company" if field is empty
  $contractor_nid = false;    
  if (isset($form['field_contractor_ref'][LANGUAGE_NONE][0])) {
    $contractor_nid = $form['field_contractor_ref'][LANGUAGE_NONE][0]['nid']['#default_value'];
  }

  if (!$contractor_nid) {
    $company_nid = _erpal_basic_helper_get_own_company_nid(false);
    $form['field_contractor_ref'][LANGUAGE_NONE][0]['nid']['#default_value'] = $company_nid;
  }

  //prefill invoice number field with next possible value if no invoice number is already set
  if (isset($form['field_invoice_number'][LANGUAGE_NONE][0]['value'])) {   
    if (!$form['field_invoice_number'][LANGUAGE_NONE][0]['value']['#default_value']) {
      $form['field_invoice_number'][LANGUAGE_NONE][0]['value']['#default_value'] = _erpal_invoice_helper_get_next_invoice_number();
    }
  }
  
  //set default currency
  $default_currency = _erpal_invoice_helper_get_default_currency();
  $form['field_currency'][LANGUAGE_NONE]['#default_value'] = $default_currency;
}

/**
* Implements hook_billable_currencies provided by billable module
*/
function erpal_invoice_helper_billable_currencies() {
  module_load_include('inc', 'erpal_invoice_helper', 'inc/config');
  return _erpal_invoice_helper_currencies_arr();
}

/**
* submit handler for invoice node form
*/
function _erpal_invoice_helper_invoice_form_submit($form, &$form_state) {
  _erpal_invoice_helper_calculate_billables_ref_from_form($form, $form_state);
  
}

/**
* creates billables from form widget values
*/
function _erpal_invoice_helper_calculate_billables_ref_from_form($form, &$form_state) {  
  
  $values = $form_state['values'];
  $billables_ref = isset($values['field_billables_ref'][LANGUAGE_NONE]) ? $values['field_billables_ref'][LANGUAGE_NONE] : array();
  $billables_values = isset($values['field_billables_ref_values'][LANGUAGE_NONE]) ? $values['field_billables_ref_values'][LANGUAGE_NONE] : array() ;

  //get some invoice values
  $currency = $values['field_currency'][LANGUAGE_NONE][0]['value'];
  $customer_nid = $values['field_customer_ref'][LANGUAGE_NONE][0]['nid'];
  $contractor_nid = $values['field_contractor_ref'][LANGUAGE_NONE][0]['nid'];
  
  //iterate through the values and check if we have to update or insert a billable.
  if (isset($billables_values)) {
    foreach ($billables_values as $delta => $value) {
      //get the billable ID if we need to update
      $billable_id = $billables_ref[$delta]['target_id'];
      if ($billable_id) {
        $billable =  billable_load($billable_id);
        //update this billable        
        
      } else {
        //create new billable
        $billable_values = array('type' => 'billable');
        $billable = billable_create($billable_values);
      }

      //set the values
      $billable->subject = $billables_values[$delta]['widget_values']['subject'];
      $billable->quantity = $billables_values[$delta]['widget_values']['quantity'];
      $billable->single_price = $billables_values[$delta]['widget_values']['single_price'];
      $billable->date_delivery = $billables_values[$delta]['widget_values']['date_delivery'];
      $billable->vat_rate = $billables_values[$delta]['widget_values']['vat_rate'];
      
      //if billable has no subject is has been created manually. So we always change the customer and the contractor
      //in save. @TODO: good or not? Perhaps leave it like it is?
      $billable->currency = $currency;
      $billable->customer_nid = $customer_nid;
      $billable->contractor_nid = $contractor_nid;
      
      $billable->save();
      
      //and now set the value in the form field
      $new_element = array('#parents' => array('field_billables_ref', LANGUAGE_NONE, $delta, 'target_id'));
      form_set_value($new_element, $billable->billable_id, $form_state);
    }
  }
}

/**
* Submit handler after the confirm delete of invoice dialog is 
*/
function _erpal_invoice_helper_confirm_delete_invoice_submit($form, $form_state) {
  $values = $form_state['values'];
  $unbill_billables = $values['unbill_billables'];
  
  if ($unbill_billables) {    
    $billables_id_arr = unserialize($values['billable_ids']);    
    _erpal_invoice_helper_unbill_billables($billables_id_arr);
  }
}

/**
* Alters the field customer ref to have an ajax callback to change the addresses after changing
*/
function _erpal_invice_helper_field_customer_ref_alter($field) {

  $field[LANGUAGE_NONE][0]['nid']['#ajax'] = array(
    'callback' => '_erpal_invoice_helper_ajax_invoice_preselect_addresses',
    'wrapper' => 'invoice_address_wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );
  
  return $field;
}

/**
 * Implements hook_node_view().
 */
function erpal_invoice_helper_node_view($node, $view_mode, $langcode) {
  //only if the node is an invoice, set the pdf link
  if ($node->type == 'erpal_invoice') {
    
    $my_company_nid = _erpal_basic_helper_get_own_company_nid(false);
    $contractor_nid = $node->field_contractor_ref[LANGUAGE_NONE][0]['nid'];
    if ($my_company_nid == $contractor_nid) {  //only if this is an invoice from us to a customer
      $links[] = array(
        'href' => 'invoice/'.$node->nid."/pdf",
        'title' => t('Recreate and attach PDF'),
        'attributes' => array('class' => 'invoice_pdf_link'),
      );
      $node->content['links']['erpal_invoice_helper'] = array(
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
    
    _erpal_invoice_helper_replace_all_tokens($node, 'view');
    
  }
}

/**
* Implements hook_node_load
*/
function erpal_invoice_helper_node_load($node) {
  if (arg(2) == 'edit')
    return; //on edit form, we dont want tokens to be replaced
//@TODO: Replaces Tokens even on node save.....
  //the node is in an array, extract it and put it back into the array
  $my_node_arr = array();
  foreach ($node as $nid=>$a_node) {
    //_erpal_invoice_helper_replace_all_tokens($a_node, 'view'); //if we dont do that, tokens are not reolace when invoice is displayed in Pane
    //$node[$nid] = $a_node;
  }
 
}

/**
* Implements hook_menu
*/ 
function erpal_invoice_helper_menu(){

  $items = array();
  
  $items['invoice/%/pdf'] = array(
    'title' => 'Create PDF of invoice',
    'page callback' => '_erpal_invoice_helper_invoice_pdf_menu_callback',    
    'page arguments' => array(1),
    'access arguments' => array('create erpal_invoice content'),
    'file' => 'inc/invoice.pdf.inc',
    'type' => MENU_CALLBACK,
  );
  
  require_once 'inc/config.inc';
  $config_items = _erpal_invoice_helper_config_menu();
  
  $items = array_merge($items, $config_items);
  return $items;
} 

/**
* Implements hook_permission
*/
function erpal_invoice_helper_permission(){
  return array(
    'config erpal invoice' => array(
      'title' => t('Administer ERPAL invoice'), 
      'description' => t('Perform administration tasks for ERPAL invoice module.'),
    ),
  );
}

/**
* Function to start caclulating all the fields on an invoice node
* @param $invoice the invoice node the caclulation will be processed
*/
function _erpal_invoice_helper_caclulate_invoice($invoice) {
  $is_new = $invoice->is_new;
  _erpal_invoice_helper_calculate_fields($invoice);
  $invoice->is_new = $is_new; //without this workarround there has been a warning that property is new does not exist
}

/**
* Implements hook_node_update
*/
function erpal_invoice_helper_node_update($node) {
 
 //it must be an invoice node
  $type = node_type_get_type($node);

  if ($type->type == 'erpal_invoice') {
    _erpal_invoice_helper_caclulate_invoice($node);
    _erpal_invoice_helper_set_last_invoice_number($node);
  }

}

/**
* Implements hook_node_presave
*/
function erpal_invoice_helper_node_presave($node) {
  //it must be an invoice node
  $type = node_type_get_type($node);
  
  if ($type->type == 'erpal_invoice') {
    if (isset($node->nid) && $node->nid) {  //@todo otherwise it doesn't work....it throws an exception on node save if node is new!
      _erpal_invoice_helper_set_notes($node);
      _erpal_invoice_helper_caclulate_invoice($node);
      _erpal_invoice_helper_replace_order_number_tokens($node);
    }
  }
} 


/**
* Implements hook_node_insert
*/
function erpal_invoice_helper_node_insert($node) {
  //it must be an invoice node
  $type = node_type_get_type($node);

  if ($type->type == 'erpal_invoice') {
    _erpal_invoice_helper_caclulate_invoice($node);
    _erpal_invoice_helper_set_last_invoice_number($node);
  }
}


/**
* Node gets validated
*/
function erpal_invoice_helper_node_validate($node, $form, &$form_state) {
  //it must be an invoice node
  $type = node_type_get_type($node);

  if ($type->type == 'erpal_invoice') {
     module_load_include('inc', 'erpal_invoice_helper', 'inc/invoice.validate');
    $errors = _erpal_invoice_helper_invoice_validate($node);
    //now set form errors
    foreach ($errors as $fieldname=>$field_errors) {
      foreach ($field_errors as $text) {
        form_set_error($fieldname, $text);
      } 
    }
  }
}

/**
* Functions that returns all billables with sub billables (reduced) to a gven invoice
*/
function _erpal_invoice_helper_invoice_attachment_billables($invoice) {
  $billables = array();

  if (isset($invoice->field_billables_ref[LANGUAGE_NONE])) {
    $billable_ids = $invoice->field_billables_ref[LANGUAGE_NONE];
    if (is_array($billable_ids)) {
      foreach ($billable_ids as $billable_id) {
        if (isset($billable_id['target_id']))
          $billable_id = $billable_id['target_id'];
        if ($billable_id) {          
          $billable = billable_load($billable_id);
          $billables[] = $billable;
        }
      }
    }
  }
  
  return $billables;
}

/**
* Function to prepare variables for invoice
*/
function template_preprocess_invoice_pdf_html(&$variables) {

  $invoice = $variables['invoice'];
  module_load_include('inc', 'erpal_basic_helper', 'inc/config');
  $company_nid = _erpal_basic_helper_get_own_company_nid(false);
  
  if (!$company_nid)
    drupal_set_message(t('Please set !link', array('!link' => l('your company'), 'admin/erpal/basic')), 'warning');
  
  $company = node_load($company_nid);

  //prepare all Data in an array
  //get the address field collection of the company
  
 // hier weiter aber dafür brauchen wir noch ein Feld an der invoice, nämlich "company" und "company_address" welches
 // festhällt wer die Rechnung geschrieben hat (also die "eigene" company).

  $address_entity = _erpal_basic_helper_get_my_address_entity($company);
  
  $company_arr = array(
    'name' => $company->title,
    'street' => isset($address_entity->field_street[LANGUAGE_NONE]) ? $address_entity->field_street[LANGUAGE_NONE][0]['value'] : '',
    'city' => isset($address_entity->field_city[LANGUAGE_NONE]) ? $address_entity->field_city[LANGUAGE_NONE][0]['value'] : '',
    'zip' => isset($address_entity->field_zip_code[LANGUAGE_NONE]) ? $address_entity->field_zip_code[LANGUAGE_NONE][0]['value'] : '',
    //@TODO Country must be the display value of the field, not the database value (get it from allowed values of the country field)
    'country' => isset($address_entity->field_country[LANGUAGE_NONE]) ? $address_entity->field_country[LANGUAGE_NONE][0]['value'] : '',
  );
  
  //get the customer
  $customer_nid = $invoice->field_customer_ref[LANGUAGE_NONE][0]['nid'];
  $customer_node = node_load($customer_nid);
  if (isset($customer_node->field_vat_number[LANGUAGE_NONE]) && isset($customer_node->field_vat_number[LANGUAGE_NONE][0]))
    $vat_number = $customer_node->field_vat_number[LANGUAGE_NONE][0]['value'];
    
  //get the address entity of the invoice!
  $entity_id = $invoice->field_invoice_address_id[LANGUAGE_NONE][0]['value'];
  $address_entity = entity_load('field_collection_item', array($entity_id));
  $address_entity = $address_entity[$entity_id];
  $customer_arr = array(
    'name' => $customer_node->title,
    'vat_number' => isset($vat_number) ? $vat_number : '',    
    'street' => isset($address_entity->field_street[LANGUAGE_NONE]) ? $address_entity->field_street[LANGUAGE_NONE][0]['value'] : '',
    'city' => isset($address_entity->field_city[LANGUAGE_NONE]) ? $address_entity->field_city[LANGUAGE_NONE][0]['value'] : '',
    'zip' => isset($address_entity->field_zip_code[LANGUAGE_NONE]) ? $address_entity->field_zip_code[LANGUAGE_NONE][0]['value'] : '',
    //@TODO Country must be the display value of the field, not the database value (get it from allowed values of the country field)
    'country' => isset($address_entity->field_country[LANGUAGE_NONE]) ? $address_entity->field_country[LANGUAGE_NONE][0]['value'] : '',
  );
  
  $invoice_number = $invoice->field_invoice_number[LANGUAGE_NONE][0]['value'];
  $invoice_date = $invoice->field_invoice_date[LANGUAGE_NONE][0]['value'];
  
  //get the billables in an array
  $billable_entity_ids = $invoice->field_billables_ref[LANGUAGE_NONE];
  $billables = array();
  $date_form_date = _erpal_basic_helper_date_format_date_only();

  foreach ($billable_entity_ids as $billable_id) {
    $billable_id = $billable_id['target_id'];
    $billable = billable_load($billable_id);

    $billables[$billable_id] = array(
      'subject' => $billable->subject,
      'date_delivery' => date($date_form_date, $billable->date_delivery),
      'subject_nid' => $billable->subject_nid,
      'quantity' => $billable->quantity,
      'single_price' => $billable->single_price,
      'total_price' => $billable->total_price,
      'total_price_no_vat' => $billable->total_price_no_vat,
      'total_vat' => $billable->total_vat,
      'vat_rate' => $billable->vat_rate,
      'currency' => $billable->currency,
    );
  }
  
  $total = $invoice->field_invoice_total[LANGUAGE_NONE][0]['value'];
  $total_excl_vat = $invoice->field_price_no_vat[LANGUAGE_NONE][0]['value'];
  $payment_date = $invoice->field_payment_date[LANGUAGE_NONE][0]['value'];
  $currency = $invoice->field_currency[LANGUAGE_NONE][0]['value'];
  $order_numbers_intern = isset($invoice->field_order_number_intern[LANGUAGE_NONE]) ? $invoice->field_order_number_intern[LANGUAGE_NONE][0]['value'] : false;
  $order_numbers_extern = isset($invoice->field_order_number_extern[LANGUAGE_NONE]) ? $invoice->field_order_number_extern[LANGUAGE_NONE][0]['value'] : false;
  
  $notes = '';
  if (isset($invoice->field_note[LANGUAGE_NONE]))
    $notes = $invoice->field_note[LANGUAGE_NONE][0]['value'];
  
  //total_vat is a field collection, so load it an pack it into an array!
  $total_vats = array();
  $vat_entities = $invoice->field_invoice_vat[LANGUAGE_NONE];
  foreach ($vat_entities as $vat_entity_id) {
    $vat_entity_id = $vat_entity_id['value'];
    $vat_entity = entity_load('field_collection_item', array($vat_entity_id));
    if (isset($vat_entity[$vat_entity_id])) {
      $vat_entity = $vat_entity[$vat_entity_id];
      $entity_vat_rate = $vat_entity->field_vat_rate[LANGUAGE_NONE][0]['value'];
      $entity_vat_total = $vat_entity->field_vat_total[LANGUAGE_NONE][0]['value'];
      $total_vats[] = array(
        'var_rate' => $entity_vat_rate,
        'vat_value' => $entity_vat_total,
        'currency' => $currency, //this is the curency of the invoice, it must be equal anyway!
      );
    }
  }
  
  //get auto notes add them

  $flat_auto_notes = array();
  if (isset($invoice->field_auto_note[LANGUAGE_NONE]) && is_array($invoice->field_auto_note[LANGUAGE_NONE]))
  foreach ($invoice->field_auto_note[LANGUAGE_NONE] as $delta=>$value) {
    $flat_auto_notes[] = $value['value'];
  }

  $variables['company'] = $company_arr;
  $variables['company_node'] = $company;
  $variables['customer'] = $customer_arr;
  $variables['invoice_number'] = _erpal_invoice_helper_get_invoice_number_prefix().$invoice_number;
  $variables['invoice_date'] = date($date_form_date, $invoice_date);
  $variables['billables'] = $billables;
  $variables['total'] = $total;
  $variables['currency'] = $currency;
  $variables['order_numbers_intern'] = $order_numbers_intern;
  $variables['order_numbers_extern'] = $order_numbers_extern;
  $variables['total_excl_vat'] = $total_excl_vat;
  $variables['total_vat'] = $total_vats;
  $variables['payment_date'] = date($date_form_date, $payment_date);
  $variables['notes'] = $invoice->field_note[LANGUAGE_NONE][0]['value'];
  $variables['auto_notes'] = $flat_auto_notes;

}

/**
* Implements hook_vat_rates provided by billable module
*/
function erpal_invoice_helper_vat_rates() {
  module_load_include('inc', 'erpal_invoice_helper', 'inc/config');
  return _erpal_invoice_helper_vat_rates_arr(true);
}

/**
* Callback after customer_ref field on invoice form has changed with ajax callback
* assigned in feature_erpal_invoice
*/
function _erpal_invoice_helper_ajax_invoice_preselect_addresses($form, $form_state) {  
    
  return $form['field_invoice_address_id'][LANGUAGE_NONE];  //form has already been processed, so just return the elements
}

/**
* Callback function for returning all available addresses of a customer 
* in field_invoice_address_id at an invoice
*/
function erpal_invoice_helper_field_invoice_address_id_allowed_values($field) {
  if ($field['field_name'] != 'field_invoice_address_id') {    
    return array();
  } else {
    //@TODO getting the current node from url args is kind of dirty, but I actually
    //dont know how to do it better and we need the current node to get information
    //if it is edit and we have already a customer set to get its available addresses        
    $invoice_nid = arg(1);
  }

  $cached_customer_nid = _erpal_invoice_helper_cache('erpal_ajax_adresses', false);  //get cached customer and clear cache
  if ($cached_customer_nid) {
    $customer_node = node_load($cached_customer_nid);
  }
  elseif ($invoice_nid && intval($invoice_nid)."" == $invoice_nid.""){ //ensure it is an integer and not "add"
    $invoice_node = node_load($invoice_nid);  
    $customer_nid = $invoice_node->field_customer_ref[LANGUAGE_NONE][0]['nid'];
    $customer_node = node_load($customer_nid);    
  } else
    return array();

  $allowed_values = _erpal_basic_helper_get_contact_adresses($customer_node, true);

  return $allowed_values;
}

/**
* replaces all invoice tokens
*/
function _erpal_invoice_helper_replace_all_tokens($invoice, $op) {
  //replace tokens
  if ($op == 'view') {
    if (isset($invoice->field_note[LANGUAGE_NONE])) {
      foreach ($invoice->field_note[LANGUAGE_NONE] as $delta=>$note) {
        if (is_numeric($delta) && intval($delta)."" == $delta."")
          $invoice->field_note[LANGUAGE_NONE][$delta]['value'] = token_replace(nl2br($note['value']), array('erpal_invoice' => $invoice));
      }
    }
  } elseif ($op == 'pdf') {
    if (isset($invoice->field_note[LANGUAGE_NONE])) {
      foreach ($invoice->field_note[LANGUAGE_NONE] as $delta=>$note) {
        $invoice->field_note[LANGUAGE_NONE][$delta]['value'] = token_replace($note['value'], array('erpal_invoice' => $invoice));
      }
    }
  }
}

/**
* Return all Order Numbers to an invoice. Ordernumbers are fetched by following reference chain
* billable->subject(task)->project->crm_activity->field_order_number_intern/extern
*/
function _erpal_invoice_helper_get_order_numbers($invoice_node) {
  $numbers = array(
    'intern' => array(),
    'extern' => array(),
  );

  if (module_exists('feature_erpal_project_basic')) {
    $line_items = $invoice_node->field_billables_ref[LANGUAGE_NONE];
    foreach ($line_items as $line_item) {
      if (!$line_item['target_id'])
        continue;
        
      $billable = billable_load($line_item['target_id']);
      $subject_nid = $billable->subject_nid;
      
      //if there is no subject because the billable was entered manually,
      //we cannot get the ordernumber
      if (!$subject_nid <= 0 || !$subject_nid)
        continue;
      
      $subject_node = node_load($subject_nid);
      
      if ($subject_node->type == 'erpal_timetracking') {
        //get the subject of the timetracking
        $subject_nid = $subject_node->field_timetracking_subject[LANGUAGE_NONE][0]['nid'];
        $subject_node = node_load($subject_nid);
        
        //then proceed as if we have a task or a project...
      }
      
      if ($subject_node->type == 'erpal_task' || $subject_node->type == 'erpal_project') {
        $activity_node = _erpal_projects_helper_get_activity($subject_node);        
        if ($activity_node) {
          //get the order numbers intern and extern and add it to the $numbers array
          if (isset($activity_node->field_order_number_intern[LANGUAGE_NONE][0]['value'])) {
            $order_number_intern = $activity_node->field_order_number_intern[LANGUAGE_NONE][0]['value'];
            $numbers['intern'][] = $order_number_intern;
          }
          
          if (isset($activity_node->field_order_number_extern[LANGUAGE_NONE][0]['value'])) {
            $order_number_extern = $activity_node->field_order_number_extern[LANGUAGE_NONE][0]['value'];
            $numbers['extern'][] = $order_number_extern;
          }
        }
      }

    }
  }

  return $numbers;
}


/**
* Saves the given invoice number as last invoice number
*/
function _erpal_invoice_helper_set_last_invoice_number($invoice) {
  //save only if it is numeric, this will be validated in validation function
  //save only for contractor = own company
  module_load_include('inc', 'erpal_basic_helper', 'inc/config');
  $company_nid = _erpal_basic_helper_get_own_company_nid(false);
  if (isset($invoice->field_contractor_ref[LANGUAGE_NONE][0]['nid']))
    $contractor_nid = $invoice->field_contractor_ref[LANGUAGE_NONE][0]['nid'];
  else
    $contractor_nid = $company_nid;
    
  if (!isset($invoice->field_invoice_number[LANGUAGE_NONE][0]['value']))  
    return; 
    
  $invoice_numer = $invoice->field_invoice_number[LANGUAGE_NONE][0]['value'];
  if ($contractor_nid == $company_nid)
    if (is_numeric($invoice_numer)) 
      variable_set('erpal_last_invoice_number', $invoice_numer);
}

/**
* Returns the next possible invoice number
*/
function _erpal_invoice_helper_get_next_invoice_number() {
  $last_invoice_number = variable_get('erpal_last_invoice_number', 0);
  $last_invoice_number++;
  return $last_invoice_number;
} 

/**
* Replaces order number tokens in order number fields.
* @param object $invoice_node the node where the order number fields are replaced
*/
function _erpal_invoice_helper_replace_order_number_tokens($invoice_node) {
  
  $token_data = array('erpal_invoice_referenced_data' => $invoice_node);
  if (isset($invoice_node->field_order_number_intern[LANGUAGE_NONE][0])) {
    $order_numbers_intern = $invoice_node->field_order_number_intern[LANGUAGE_NONE][0]['value'];
    $invoice_node->field_order_number_intern[LANGUAGE_NONE][0]['value'] = token_replace($order_numbers_intern, $token_data);
  }
  
  if (isset($invoice_node->field_order_number_extern[LANGUAGE_NONE][0])) {
    $order_numbers_extern = $invoice_node->field_order_number_extern[LANGUAGE_NONE][0]['value'];
    $invoice_node->field_order_number_extern[LANGUAGE_NONE][0]['value'] = token_replace($order_numbers_extern, $token_data);
  }
   
}