<?php
/**
 * @file
 * Code for the erpal_projects_helper module.
 */
  module_load_include('inc', 'erpal_projects_helper', 'inc/projects');
  module_load_include('inc', 'erpal_projects_helper', 'inc/tasks');
  module_load_include('inc', 'erpal_projects_helper', 'inc/timetracking');
  module_load_include('inc', 'erpal_projects_helper', 'inc/book');
  module_load_include('inc', 'erpal_projects_helper', 'inc/budget');
  module_load_include('inc', 'erpal_projects_helper', 'inc/config');
  module_load_include('inc', 'erpal_projects_helper', 'inc/rules'); 
  module_load_include('inc', 'erpal_projects_helper', 'inc/field_access');  
  module_load_include('inc', 'erpal_projects_helper', 'inc/dynamic.menu');
  module_load_include('inc', 'erpal_projects_helper', 'inc/print');
  module_load_include('inc', 'erpal_projects_helper', 'inc/notifications');
  module_load_include('inc', 'erpal_projects_helper', 'inc/token');
  module_load_include('inc', 'erpal_projects_helper', 'inc/theme');

/**
* Implements hook_init
*/
function erpal_projects_helper_init() {

  $mod_path = drupal_get_path('module', 'erpal_projects_helper');
  $css_path = $mod_path.'/erpal_projects_helper.css';
  drupal_add_css($css_path);
  
  _erpal_projects_helper_warn_items_in_queue_billing();
}
 
/**
 * Implements hook_ctools_plugin_directory().
 */
function erpal_projects_helper_ctools_plugin_directory($module, $plugin) {
  if ($module == 'erpal_projects_helper' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
} 
 
 
/**
 * Implements hook_action_info().
 */
function erpal_projects_helper_action_info() {
  return array(
    'erpal_projects_helper_timetracking_finalise_action' => array(
      'type' => 'entity',
      'label' => t('Finalise timetracking'),
      'description' => t('Finalise temporary timetracking entity to real timetracking node'),
      'configurable' => FALSE,
      'hooks' => array(),
      'aggregate' => TRUE,
    ),    
  ); 
} 
 
/*
* Implements hook_menu
*/ 
function erpal_projects_helper_menu(){

  $items = array();
  
  require_once 'inc/config.inc';  
  
  $config_items = _erpal_projects_helper_config_menu();
  
  $items['projects/tasks/autocomplete'] = array(
    'page callback' => '_erpal_projects_helper_tasks_autocomplete',
    'access callback' => '_erpal_projects_helper_tasks_autocomplete_access',
    'type' => MENU_CALLBACK,
  );
  
  $items['projects/project/task/%node/print'] = array(
    'page callback' => '_erpal_projects_helper_task_print',
    'page arguments' => array(3),
    'access callback' => array('_erpal_projects_helper_task_print_access'),
    'type' => MENU_CALLBACK,
  );
  
  $items = array_merge($items, $config_items);
  return $items;
}

/**
* Access callback for printing a task
*/
function _erpal_projects_helper_task_print_access() {
  return user_access('erpal print tasks');
}


/**
* Implements hook_custom_node_content_block_content to provide content for the custom content block. Hook is provided by erpal_basic_helper
*/
function erpal_projects_helper_custom_node_content_block_content($node) {  
  $notify_element = _erpal_projects_helper_get_notify_flag_link_element($node);
  
  return array(
    $notify_element,
  );
}

/**
* Implements hook_entity_update
*/
function erpal_projects_helper_entity_update($entity, $entity_type) {

  if ($entity_type == 'budget') {    
    $skip_refactoring = isset($entity->skip_refactoring) && $entity->skip_refactoring ? $entity->skip_refactoring : false;
    if (!$skip_refactoring) {
      //if budget has no timetrackings yet, enque this budget and its host node to timetracking refactoring queue
      $timetracking_nids = _erpal_projects_helper_get_timetrackings_by_budget($entity->budget_id);
      if (!count($timetracking_nids)) {
        //get the field-collection that referenecs this budget entity
        $budget_host_node = _erpal_projects_helper_get_nodes_referencing_budget($entity->budget_id);
        if (!$budget_host_node)
          return;
          
        _erpal_projects_helper_reorganize_timetrackings_to_budgets_queue($budget_host_node, array($entity->budget_id));
      }
    }
  }
  
  //check if we want to send some notifications
  module_load_include('inc', 'erpal_projects_helper', 'inc/notifications');
  _erpal_projects_helper_handle_notifications_on_subscribers($entity, $entity_type, 'update');
}

/**
* Implements hook_entity_insert
*/
function erpal_projects_helper_entity_insert($entity, $type) {
  //check if we want to send some notifications
  module_load_include('inc', 'erpal_projects_helper', 'inc/notifications');
  _erpal_projects_helper_handle_notifications_on_subscribers($entity, $type, 'insert');
}

/**
 * Implements hook_help().
 */
function erpal_projects_helper_help($path, $arg) {
  switch ($path) {    
    case 'admin/structure/taxonomy/%':
      $vocab_name = $arg[3];      
      if ($vocab_name == 'project_status_terms' || $vocab_name == 'task_status_terms')
        _erpal_basic_helper_warn_semantic_not_covered_by_terms($vocab_name, 'field_simple_process_status');     
  }
}

function erpal_projects_helper_preprocess_field(&$variables) {
  _erpal_projects_helper_preprocess_field_warnings($variables);
}


/**
* alter fields so they display warning colors
*/
function _erpal_projects_helper_preprocess_field_warnings(&$variables) {
  $element = $variables['element'];
  $object = isset($element['#object']) ? $element['#object'] : false;
  
  if (!$object)
    return;

  if ($element['#field_name'] == 'field_project_status_term' || $element['#field_name'] == 'field_date' || $element['#field_name'] == 'field_task_status_term') {    
  
    //if semantic meaning is "in progress" and deadline is over current date, make red    
    if (isset($object->type) && ($object->type == 'erpal_project' || $object->type == 'erpal_task')) {
      $node = $object;
      //get the status field name
      $status_field_name = _erpal_projects_helper_get_status_field_name($node);
      $deadline = isset($node->field_date[LANGUAGE_NONE][0]) ? $node->field_date[LANGUAGE_NONE][0]['value2'] : false;
      
      if ($deadline)
        $deadline_unix = erpal_date_as_unix_timestamp($deadline);   
      else
        $deadline_unix = false;
        
      $status = _erpal_crm_helper_get_date_status_state($deadline_unix, false, $node, $status_field_name);
      $variables['classes_array'][] = $status;
    }
  }
}



/**
* Returns the name of the status field on a given task or project node
*/
function _erpal_projects_helper_get_status_field_name($node) {
  if ($node->type == 'erpal_project')
    return 'field_project_status_term';
    
  if ($node->type == 'erpal_task')
    return 'field_task_status_term';
}

/**
* Implements hook_theme
*/
function erpal_projects_helper_theme() {
  return array(
    'erpal_budget_usage' => array(
      'variables' => array('node' => NULL, 'pdf_object' => NULL, 'options' => array(), 'counter' => 0),
      'template' => 'template/budget_usage',
    ),    
    'erpal_task_print' => array(
      'variables' => array('node' => NULL),
      'template' => 'template/task_print',
    ),
  );
}


/**
* Implements hook_node_delete
*/
function erpal_projects_helper_node_delete($node) {
  if ($node->type == 'erpal_timetracking') {
    _erpal_projects_helper_add_duration_to_budget($node);
  }
}

/**
* Implements hook_field_access
*/
function erpal_projects_helper_field_access($op, $field, $entity_type, $entity = NULL, $account = NULL) {
  module_load_include('inc', 'erpal_projects_helper', 'inc/field_access');
  return _erpal_projects_helper_field_access($op, $field, $entity_type, $entity, $account);
}

/**
* Implements hook_node_validate
*/
function erpal_projects_helper_node_validate($node, $form, &$form_state) {

  if ($node->type == 'erpal_project') {
    if (isset($node->field_books_ref[LANGUAGE_NONE])) {
      foreach ($node->field_books_ref[LANGUAGE_NONE] as $delta => $nid) {
        
        if (!is_numeric($delta))
          continue;
        
        $book_nid = $nid['target_id'];        
        if (!$book_nid)
          continue;
        
        $projects = _erpal_projects_helper_book_multiple_referenced_by_project_validate($book_nid, array($node->nid));
        if (count($projects) > 0) {
          $project_nid = $projects[0];
          $project_node = node_load($project_nid);
          $project_link = l($project_node->title, 'node/'.$project_node->nid);
          form_set_error('field_books_ref]['.LANGUAGE_NONE.']['.$delta.'][target_id', t('The book can only be included into one project and is already included in "!project_link"', array('!project_link' => $project_link)));
        }
      }
    }
  }
  
  if ($node->type == 'erpal_timetracking') {
    _erpal_projects_helper_node_validate_timetracking($node, $form, $form_state);
  }
}

/**
* Validates a timetracking node called in @see erpal_projects_helper_node_validate
*/
function _erpal_projects_helper_node_validate_timetracking($node, $form, &$form_state) {
  
  $is_one_day = erpal_lib_date_field_validate_one_day($node, 'field_date_time', $form_state);
  
  if (!$is_one_day) {
    form_set_error('field_date_time', t('Your timetracking must start and end at the same day.'));
  }
}

/**
* Implementes hook_field_attach_validate() 
*/
function erpal_projects_helper_field_attach_validate($entity_type, $entity, &$errors) {

  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_pricing') {
    $new_errors = _erpal_projects_helper_field_pricing_validate($entity);
    $errors = array_merge($errors, $new_errors);
  }
}

/**
* Implements hook_entity_presave
*/
function erpal_projects_helper_entity_presave($entity, $type) {
  if ($type == 'timetracking') {
    _erpal_projects_helper_timetracking_entity_set_project_tags($entity);
  }
}

/**
* Implementes hook_field_attach_presave() 
*/
function erpal_projects_helper_field_attach_presave($entity_type, $entity) {
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_pricing') {    
    _erpal_projects_helper_field_pricing_presave($entity);
  }
}

/**
* Implements hook_budget_delete_validate provided by budget module
*/
function erpal_projects_helper_budget_delete_validate($budget) {
  //if the budget alway has timetrackings, user is not allowed to delete
  $timetracking_nids = _erpal_projects_helper_get_timetrackings_by_budget($budget->budget_id);
  
  if (count($timetracking_nids) > 0) {
    $errors[] = t('The budget %budget_name could not be deleted because there are timetrackings booked to it.', array('%budget_name' => $budget->defaultLabel()));
    return array(
      'erpal_projects_helper' => array(
        'result' => false,
        'errors' => $errors,
      ),
    );
  } else
    return array(
      'erpal_projects_helper' => array(
        'result' => true,
      ),
    );
}
 
/**
* Implements hook_permission
*/
function erpal_projects_helper_permission(){
  $permissions = array(
    'config erpal projects' => array(
      'title' => t('Administer ERPAL Projects'), 
      'description' => t('Perform administration tasks for ERPAL Projects module.'),
    ),
    'access projects view' => array(
      'title' => t('Access projects view'), 
      'description' => t('Allows the user to access the projects view'),
    ),
    //LIST VIEWS
    'access tasks view' => array(
      'title' => t('Access tasks view'), 
      'description' => t('Allows the user to access the tasks view'),
    ),
    'bypass tickets view access' => array(
      'title' => t('Skipp tickets view access'), 
      'description' => t('Allows the user to always see the tickets list of projects, even if he is not a team member'),
    ),
    'bypass tasks view access' => array(
      'title' => t('Skipp tasks view access'), 
      'description' => t('Allows the user to always see the tasks list of projects, even if he is not a team member'),
    ),
    'access tickets view' => array(
      'title' => t('Access tickets view'), 
      'description' => t('Allows the user to access the tickets view'),
    ),
    'access sub tasks and tickets view' => array(
      'title' => t('Access sub tasks and tickets view'), 
      'description' => t('Allows the user to access the sub tasks and tickets view'),
    ),
    'access timetrackings view' => array(
      'title' => t('Access timetrackings view'), 
      'description' => t('Allows the user to access the timetrackings view'),
    ),
    'access tasks details' => array(
      'title' => t('Access tasks tree view'), 
      'description' => t('Allows the user to access the task tree view'),
    ),
    'access tickets details' => array(
      'title' => t('Access tickets details view'), 
      'description' => t('Allows the user to access the tickets details view'),
    ),
    'access sub tasks and tickets details view' => array(
      'title' => t('Access sub tasks and tickets details view'), 
      'description' => t('Allows the user to access the sub tasks and tickets details view'),
    ),
    'access tasks tree' => array(
      'title' => t('Access tasks details view'), 
      'description' => t('Allows the user to access the task details view'),
    ),
    'access tickets tree' => array(
      'title' => t('Access tickets tree view'), 
      'description' => t('Allows the user to access the tickets tree view'),
    ),
    'access sub tasks and tickets tree view' => array(
      'title' => t('Access sub tasks and tickets tree view'), 
      'description' => t('Allows the user to access the sub tasks and tickets tree view'),
    ),
    'erpal print tasks' => array(
      'title' => t('Print erpal tasks'), 
      'description' => t('Allows the user to print erpal tasks'),
    ),
    
    'access budgets view' => array(
      'title' => t('Access budgets view'), 
      'description' => t('Allows the user to access the budgets view'),
    ),
  );
  
  module_load_include('inc', 'erpal_projects_helper', 'inc/field_access');
  $field_access_permissions = _erpal_projects_helper_field_access_permissions();
  
  return array_merge($permissions, $field_access_permissions);
}

/**
* Implements hook_clone_book_action_form_alter
* Form to set parameter to clone tasks in book clone process
* @param $args['book_node'] is the book node that will be cloned
*/
function erpal_projects_helper_clone_book_action_form_alter(&$form, $form_state, $args) {
  $book_node = $args['book_node'];
  _erpal_projects_helper_ensure_task_settings_form_element($form);
  _erpal_projects_helper_clone_tasks_form_add_elements($form, $book_node, 'book');
  
}

/**
* Implements hook_cron_queue_info ()
*/
function erpal_projects_helper_cron_queue_info() {
  $queues = array();
  $queues['reorganize_timetrackings'] = array(
    'worker callback' => '_erpal_projects_helper_reorganize_timetrackings_queue_run', // This is the callback function for each queue item.
    'time' => 60, // This is the max run time per cron run in seconds.
  );
 
  return $queues;
}

/**
* additional validation handler for clone config form of task elements
*/
function erpal_projects_helper_clone_book_action_form_validate($form, $form_state) {
  $values = $form_state['values'];
  $clone_tasks = $values['clone_tasks'];
  $project = isset($values['project']) ? $values['project'] : 0;
  $reset_tasks_status = $values['reset_task_status'];
  $clone_type = $values['clone_type'];
  
  if (!$clone_tasks)
    return; //if tasks will not be cloned no further validation is needed
    
  //all values must be set!
  if (!$project && $clone_type == 'book')
    form_set_error('project', t('Please select a project'));
}

/**
* Implements hook_jstree_context_menu to provide custom menu for book js tree, dependent on the node type
*/
function erpal_projects_helper_jstree_context_menu($entity_type, $type, $id, $root_id) {
  
  $current_viewed_url = $_SESSION['view_jstree']['current_tree_url']; //@TODO dirty but works, if we delete a node in the tree we want to be redirected to the curent tree view againt und this is where we are actually.
  $query_back = array('destination' => $current_viewed_url);
  $query_add = $query_back;
  $query_add['field_parent'] = $id;
  
  $query_timetracking_add = $query_back;
  $query_timetracking_add['field_timetracking_subject'] = $id;
  $parent_node = node_load($id);

  $has_project = _erpal_projects_helper_has_project($parent_node);
  
  if ($type == 'erpal_task') {
    
    $menu = array(
      array('title' => t('View'), 'url' => url('node/'.$id)),
      array('title' => t('Edit'), 'url' => url('node/'.$id.'/edit', array('query' => $query_back))),
      array('title' => t('Delete'), 'url' => url('node/'.$id.'/delete', array('query' => $query_back))),            
    );
    
    if ($has_project) {
      $query_add['field_project_ref'] = $has_project;
      $menu[] = array('title' => t('Add sub task'), 'url' => url('node/add/erpal-task', array('query' => $query_add)));
      $menu[] = array('title' => t('Add timetracking'), 'url' => url('node/add/erpal-timetracking', array('query' => $query_timetracking_add)));
    }
    
    return $menu;
  }
  
  if ($type == 'erpal_book_page') {            
    if ($has_project) {
      $query_add['field_project_ref'] = $has_project;
      $menu = array(
        array('title' => t('Add task'), 'url' => url('node/add/erpal-task', array('query' => $query_add))),
      );
      
      return $menu;
    }    
  }
}

/**
* Implements hook_possible_timetracking_subjects provided by timetracking module
*/
function erpal_projects_helper_possible_timetracking_subjects() {
  //get all nodes of type erpal_tasks
  $project_nid = false; //set later...
  $tasks = _erpal_projects_helper_get_tasks($project_nid, true);

  return array($tasks);
}

/*
* Implements hook_field_widget_form_alter
* Adds a validation hook to the beginning of the #element_validate
* to provide custom validation on the required fields within the
* widget.
*/
function erpal_projects_helper_field_widget_form_alter(&$element, &$form_state, $context) {
  switch ($context['instance']['widget']['type']) {
    case 'field_collection_embed':
      if ($element['#field_name'] == 'field_pricing') {
        //add validation handler
        $element['#element_validate'][] = '_erpal_projects_helper_field_pricing_widget_validate';
      }
      break;
  }
}

/**
* Validate the pricing field collection
*/
function _erpal_projects_helper_field_pricing_widget_validate($element, &$form_state, $form) {
  $values = $form_state['values'];
  $pricing_entity = isset($values['field_pricing'][LANGUAGE_NONE][0]['entity']) ? $values['field_pricing'][LANGUAGE_NONE][0]['entity'] : false;

  if (!$pricing_entity)
    return;
  
  $price_mode = isset($pricing_entity->field_price_mode[LANGUAGE_NONE][0]['value']) ? $pricing_entity->field_price_mode[LANGUAGE_NONE][0]['value'] : 'none';
  $price = isset($pricing_entity->field_price[LANGUAGE_NONE][0]['value']) ? $pricing_entity->field_price[LANGUAGE_NONE][0]['value'] : false;
  $budgets = isset($pricing_entity->field_budgets[LANGUAGE_NONE]) ? $pricing_entity->field_budgets[LANGUAGE_NONE] : false;

  $modes_price_needed = array('fixed_price', 'per_hour');
  
  //price must be set
  if (in_array($price_mode, $modes_price_needed)) {    
    if (!$price)
      form_error($form['field_pricing'][LANGUAGE_NONE][0]['field_price'], t('Please set a price'));
  }
  
  //price OR at least one budget must be set
  if ($price_mode == 'budget') {
    $budget_count = count($budgets);
    if (!$budget_count && !$price) {
      form_error($form['field_pricing'][LANGUAGE_NONE][0]['field_budgets'], t('Please set a price or add some budgets'));
    }
  }
   
}

/**
* Sets the default value of the field_project_status_term
*/
function _erpal_project_helper_field_project_status_term_set_default(&$form) {
  if (isset($form['field_project_status_term'][LANGUAGE_NONE]['#default_value'][0]))
    return;
   
  $vid = _erpal_basic_helper_term_field_get_vid('field_project_status_term'); 
  $default_tid = _erpal_basic_helper_get_default_tid($vid);
  if ($default_tid)
    $form['field_project_status_term'][LANGUAGE_NONE]['#default_value'][0] = $default_tid;
  
}

/**
* Sets the default value of the field_task_status_term
*/
function _erpal_project_helper_field_task_status_term_set_default(&$form) {
  if (isset($form['field_task_status_term'][LANGUAGE_NONE]['#default_value'][0]))
    return;
   
  $vid = _erpal_basic_helper_term_field_get_vid('field_task_status_term'); 
  $default_tid = _erpal_basic_helper_get_default_tid($vid);
  if ($default_tid)
    $form['field_task_status_term'][LANGUAGE_NONE]['#default_value'][0] = $default_tid;
  
}

/**
* Sets the default value of the field_priority_term
*/
function _erpal_project_helper_field_prority_term_set_default(&$form) {
  if (isset($form['field_priority_term'][LANGUAGE_NONE]['#default_value'][0]))
    return;
  
  $vid = _erpal_basic_helper_term_field_get_vid('field_priority_term'); 
  $default_tid = _erpal_basic_helper_get_default_tid($vid);

  if ($default_tid)
    $form['field_priority_term'][LANGUAGE_NONE]['#default_value'][0] = $default_tid;
}

/**
* Sets the default value of the field_task_type_term
*/
function _erpal_project_helper_field_type_term_set_default(&$form) {
  if (isset($form['field_task_type_term'][LANGUAGE_NONE]['#default_value'][0]))
    return;
   
  $vid = _erpal_basic_helper_term_field_get_vid('field_task_type_term'); 
  $default_tid = _erpal_basic_helper_get_default_tid($vid);
  if ($default_tid)
    $form['field_task_type_term'][LANGUAGE_NONE]['#default_value'][0] = $default_tid;
  
}

/**
* Implements hook_clone_page_action_form_alter provided by clone bulk operation by erpal_book_helper module
* @param $args['book_node'] is the book the cloned pages are referenced to
* @param $args['parent_node'] is the parent node the cloned node will be directely referenced to.
*/
function erpal_projects_helper_clone_page_action_form_alter(&$form, $form_state, $args) {
  $book_node = $args['book_node'];
  $parent_node = $args['parent_node'];
  //check if the given book to clone hase a project, otherwise show a message that tasks will not be cloned
  //cause book needs a project
  $projects = _erpal_project_helper_get_referencing_projects_by_book($book_node->nid);
  
  if ($projects) {
    _erpal_projects_helper_clone_tasks_form_add_elements($form, $book_node, 'page');    
  } else {
    $node_link = l($book_node->title, 'node/'.$book_node->nid);
    $form['clone_tasks'] = array(
      '#type' => 'item',
      '#markup' => t('INFORMATION: Tasks are not cloned because !node_link is not assigned to a project', array('!node_link' => $node_link)),
    );
  }
}

/**
* Implements hook_options_for_clone_alter
* Function alters clone options after clone config form has been submitted by clone bulk operation or book clone
*/
function erpal_projects_helper_options_for_clone_alter(&$options, $form_values) {
  $options['reset_task_status'] = isset($form_values['reset_task_status']) ? $form_values['reset_task_status'] : 0;
  $options['project'] = isset($form_values['project']) ? $form_values['project'] : 0;
}

/**
* Returns clone tasks subform elements needed for cloning operations of books and book pages
* @param $clone_type is page (if a page is cloned to be a sub page of an existing book) or book (if a whole book is cloned to a new one)
*/
function _erpal_projects_helper_clone_tasks_form_add_elements(&$form, $book_node, $clone_type) {
  
  //if there is no project referencing that book, no options to clone taks should be displayed
  $project_nid = _erpal_projects_helper_has_project($book_node);
  
  if (!$project_nid)
    return;
  
  $form['clone_tasks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Clone tasks'),
    '#default_value' => false,
    '#description' => t('If checked, all tasks of the selected templates will be cloned, too'),
    '#weight' => -5,
  );
  
  _erpal_projects_helper_ensure_task_settings_form_element($form);
  
  $form['clone_type'] = array(
    '#type' => 'value',
    '#value' => $clone_type,
  );
  
  if ($clone_type == 'book') {
    $projects = _erpal_projects_helper_get_projects();
    $form['task_settings']['project'] = array(
      '#type' => 'select',
      '#title' => t('Project'),
      '#description' => t('For cloning tasks you need to choose a project the cloned book will be assigned to'),
      '#options' => $projects,
    );
    
    $form['#validate'][] = 'erpal_projects_helper_clone_book_action_form_validate';
  }
  
  $form['task_settings']['reset_task_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set task status to inserted and progress to 0%'),
    '#default_value' => true,
  );
}

/**
* Ensures that a task settings fieldset element is available in the given form
*/ 
function _erpal_projects_helper_ensure_task_settings_form_element(&$form) {
  //if clone tasks is checked, show some other relevant information for cloning tasks
  if (!isset($form['task_settings'])) {
    $form['task_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Task and project settings'),
      '#collapsible' => true,
      '#collapsed' => false,
      '#states' => array(
        // Show the settings when the clone tasks checkbox is checked.
        'visible' => array(
          ':input[id="edit-clone-tasks"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}


/**
* Implements hook_form_alter
*/
function erpal_projects_helper_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'erpal_task_node_form') {
    _erpal_projects_helper_task_node_form_alter($form, $form_state);
    _erpal_project_helper_field_type_term_set_default($form);
    _erpal_project_helper_field_task_status_term_set_default($form);
    _erpal_project_helper_field_prority_term_set_default($form);    
    
    _erpal_projects_helper_task_edit_form_prepopulate($form);
    _erpal_basic_helper_warn_semantic_not_covered_by_terms('task_status_terms', 'field_simple_process_status'); 

    _erpal_projects_helper_call_form_alter_hook($form); //let other modules alter after this module does   
    _erpal_projects_helper_task_add_time_validation($form, $form_state);
  }
  
  if ($form_id == 'erpal_timetracking_node_form') {
    _erpal_projects_helper_timetracking_node_form_alter($form, $form_state);
    _erpal_projects_helper_timetracking_add_time_validation($form, $form_state);
  }
  
  if ($form_id == 'erpal_books_helper_pdf_form') {
    _erpal_projects_helper_book_pdf_form_alter($form, $form_state);
  }
  
  if ($form_id == 'erpal_project_node_form') {
    _erpal_projects_helper_project_node_form_alter($form, $form_state);
    _erpal_project_helper_field_project_status_term_set_default($form);
    _erpal_project_helper_field_prority_term_set_default($form);    
    
    _erpal_basic_helper_warn_semantic_not_covered_by_terms('project_status_terms', 'field_simple_process_status');
    
    _erpal_projects_helper_call_form_alter_hook($form);  //let other modules alter after this module does
  }
 
  if ($form_id == 'node_delete_confirm') {
    _erpal_projects_helper_node_delete_confirm_alter($form, $form_state);
  }
  
  if ($form_id == 'budget_edit_form') {
    $form['#validate'][] = '_erpal_projects_helper_budget_validate';
  }
  
  if ($form_id == 'timetracking_quick_form') {
    _erpal_projects_helper_alter_timetracking_quick_form($form, $form_state);
  }
}


/**
 * Provides element validation for time fields.
 * Checks time format and converts it into decimal representation
 */
function _erpal_projects_helper_time_field_validate(&$element, &$form_state) {
  // field_timetracking_duration 
  $duration = $element['#value'];
  if (function_exists('erpal_lib_time_convert')) {
    // check time values in format hh:mm or hh,hh and convert it into decimal 
    // representation 
    $duration_converted = erpal_lib_time_convert($duration, 'duration');
    if ($duration_converted != $duration) {
      // set time value to form element
      $element['#value'] = $duration_converted;
    }
  }
}

/**
* function calls hook to let other modules alter form after this module has
*/
function _erpal_projects_helper_call_form_alter_hook(&$form) {
  //now get pricing informatio from parent (node or project and preset vat_rate and currency with these information
  //give other module the chance to alter task form after this module set some values like project and parent
  // Iterate through the modules calling their cron handlers (if any):
  foreach (module_implements('task_form_after_project_alter') as $module) {
    $function = $module.'_task_form_after_project_alter';
    $function($form); //need to to this because we need to give $form variable as reference    
  }
}

/**
* Alter delete form
*/
function _erpal_projects_helper_node_delete_confirm_alter(&$form, &$form_state) {
  $delete_nid = $form['nid']['#value'];
  $delete_node = node_load($delete_nid);  
  
  $project_nid = _erpal_projects_helper_has_project($delete_node);
  
  if (!$project_nid)
    return; 
  
  if ($delete_node->type == 'erpal_project') {
    //ask if task children should be delete, too
    $form['delete_tasks_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Task delete options'),
    );
    
    $node_link = l($delete_node->title, "node/".$delete_node->nid);
    $form['delete_tasks_fieldset']['delete_children'] = array(
      '#type' => 'checkbox',
      '#title' => t('I submit that all tasks of !node_link will be deleted.', array('!node_link' => $node_link)),
      '#default_value' => false,
    ); 
    
    $form['delete_tasks_fieldset']['delete_timetrackings'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete timetrackings of tasks, too'),
      '#default_value' => false,
      '#states' => array(
        // Hide the settings when the checkbox is checked notify checkbox is disabled.
        'visible' => array(
          ':input[name="delete_children"]' => array('value' => 'delete'),
        ),
      ),
    ); 
    
    $form['#validate'][] = '_erpal_projects_helper_project_delete_confirm_validate';
    $form['#validate'][] = '_erpal_projects_helper_check_budget_validate_on_delete';
    $form['#submit'][] = '_erpal_projects_helper_project_delete_confirm_submit';
    
  } elseif ($delete_node->type == 'erpal_task') {
    $form['delete_tasks_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sub task delete options'),
    );
    
    //ask if sub tasks should be deleted or if they should moved under the parent of the deleted node
    $node_link = l($delete_node->title, "node/".$delete_node->nid);
    $form['delete_tasks_fieldset']['delete_children'] = array(
      '#type' => 'radios',
      '#title' => t('Handle children options'),
      '#options' => array(
        'delete' => t('Delete sub tasks'),
        'parent' => t('Add to upper level parent task'),
      ),
      '#default_value' => 'parent',
    ); 

    $form['delete_tasks_fieldset']['delete_timetrackings'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete timetrackings of tasks, too'),
      '#default_value' => false,
      '#states' => array(
        // Hide the settings when the checkbox is checked notify checkbox is disabled.
        'visible' => array(
          ':input[name="delete_children"]' => array('value' => 'delete'),
        ),
      ),
    ); 

    //add project_nid and parent_nid as hidden values bevor node will be deleted
    $project_nid = $delete_node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
    $parent_nid = isset($delete_node->field_parent[LANGUAGE_NONE][0]['target_id']) ? $delete_node->field_parent[LANGUAGE_NONE][0]['target_id'] : false;
    
    $form['delete_node'] = array(
      '#type' => 'value',
      '#value' => $delete_node,
    );
    
    $form['project_node'] = array(
      '#type' => 'value',
      '#value' => node_load($project_nid),
    );
    
    $form['parent_node'] = array(
      '#type' => 'value',
      '#value' => $parent_nid ? node_load($parent_nid) : false,
    );
    
    $form['#submit'][] = '_erpal_projects_helper_task_delete_confirm_submit';
    $form['#validate'][] = '_erpal_projects_helper_check_budget_validate_on_delete';
    
  }
}

/**
* Submit handler of task delte confirm form
*/
function _erpal_projects_helper_task_delete_confirm_submit($form, $form_state) {
  $values = $form_state['values'];  
  $delete_node = $values['delete_node']; //node that will be deleted  
  $project_nid = $delete_node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
  $parent_node = $values['parent_node'];
  $delete_children = isset($values['delete_children']) ? $values['delete_children'] : false;

  //if there is no destination, go back to the tasks or tickets view of the project
  $destination = drupal_get_destination();
  $node_delete_uri = entity_uri('node', $delete_node);
  $node_delete_path = $node_delete_uri['path'];
  $redirect = false;
  if ($destination['destination'] == $_GET['q'] || $destination['destination'] == $node_delete_path) {
    //no destination set, so set one    
    $is_ticket = isset($delete_node->field_is_ticket[LANGUAGE_NONE][0]['value']) ? $delete_node->field_is_ticket[LANGUAGE_NONE][0]['value'] : false;
    $type = $is_ticket ? 'tickets' : 'tasks';
    $redirect = 'node/'.$project_nid.'/'.$type;
  }

  if ($delete_children == 'parent') {
    //add all nodes to parent node
    $options = array();
    $options['export_tasks'] = true;
    //get all nodes that reference the delete node using the field_parent
    $child_nids = _erpal_projects_helper_get_tasks_child_nodes($delete_node, $options, true);
    $callback_function = '_erpal_projects_helper_bulk_update_callback';
    $args['parent_nid'] = is_object($parent_node) ? $parent_node->nid : false;
    
    _erpal_basic_helper_bulk_update($child_nids, $callback_function, $args, $redirect);
   
  } elseif ($delete_children == 'delete') {
    //delete all sub tasks.
    $types = array('erpal_task');
    $child_nids = _erpal_basic_helper_get_all_child_nids_deep_search($delete_node->nid, $types);

    //get timetrackings if they should be deleted
    $delete_timetrackings = isset($values['delete_timetrackings']) ? $values['delete_timetrackings'] : false;
   
    $subject_nids = array($delete_node->nid);
    $subject_nids = array_merge($subject_nids, $child_nids);
    $nids = array();
    if ($delete_timetrackings) {
      //get timetrackings to all child nids
      $timetracking_nids = _erpal_projects_helper_get_direct_timetrackings($subject_nids);
      $child_nids = array_merge($child_nids, $timetracking_nids);   
      $subject_nids = array_merge($subject_nids, $timetracking_nids);
    }
    
    if (count($child_nids) > 0)
      $nids['node'] = $child_nids;
   
    //billables will be automatically deleted if they are not billed            
    _erpal_basic_helper_bulk_delete($nids, $redirect);    
  }
}

/**
* Callback to update a node via bulk operation
*/
function _erpal_projects_helper_bulk_update_callback($node, $args) {
  $parent_nid = $args['parent_nid'];
  
  if ($parent_nid)
    $node->field_parent[LANGUAGE_NONE][0]['target_id'] = $parent_nid;
}

/**
* Submit handler of project delete confir form
*/
function _erpal_projects_helper_project_delete_confirm_submit($form, $form_state) {
  $values = $form_state['values'];  
  $delete_nid = $values['nid'];

  //get all book_pages of given book and give them to bulk delete operation.
  $options = array();
  $task_nids = _erpal_projects_helper_get_tasks_by_project($delete_nid);

  $task_nids = array('node' => $task_nids);
  _erpal_basic_helper_bulk_delete($task_nids, 'projects/projects');
}

/**
* Function to validate that no tasks with budgets are deleted directely or while deleting children
*/
function _erpal_projects_helper_check_budget_validate_on_delete($form, $form_state) {
  //if node is not allowed to be deleted redirect with warning
  $values = $form_state['values'];  
  $delete_nid = $values['nid'];
  $delete_node = node_load($delete_nid);
  $delete_children_type = isset($values['delete_children']) ? $values['delete_children'] : false;
  $delete_children = ($delete_node->type == 'erpal_project') || ($delete_children_type == 'delete');

  $messages = array();
  if (!_erpal_projects_helper_can_delete($delete_node, $delete_children, $messages)) {
    $message_string = '';   
    foreach ($messages as $message) {
      $message_string .= '<br/>'.$message;
    }
    form_set_error('delete_tasks_fieldset', t('This node cannot be deleted because: !message_string', array('!message_string' => $message_string)));      
  }
}

/**
* Validation handler of project delete confirm
*/
function _erpal_projects_helper_project_delete_confirm_validate($form, $form_state) {
  $values = $form_state['values'];  
  $delete_nid = $values['nid'];
  $delete_node = node_load($delete_nid);

  $delete_children = isset($values['delete_children']) ? $values['delete_children'] : false;
  
  //if book will be delete checkbox must be set!
  if ($delete_node->type == 'erpal_project') {
    if (!$delete_children) {
      form_set_error('delete_children', t('Please submit checkbox to delete all tasks'));
    }        
  }
}

/**
* if node is a timetracking node and references a budget, add the billing duration to the budget again
*/
function _erpal_projects_helper_add_duration_to_budget($node) {
  if (!$node->type == 'erpal_timetracking')
    return;
         
  if (isset($node->field_budget[LANGUAGE_NONE][0]['target_id'])) {
    $budget_id = $node->field_budget[LANGUAGE_NONE][0]['target_id'];
    $budget_entity = budget_load($budget_id);
    $billing_duration = $node->field_billing_duration[LANGUAGE_NONE][0]['value'];
    $budget_entity->add_hours($billing_duration);
    $budget_entity->save();
  }
}

/**
* Decides if project links like add timetracking and tasks should be shown in a book. 
* This is only true if we have project referencing te book
* @return false if there is noch project, otherwise ONE nid of a project
*/
function _erpal_projects_helper_has_project($node) {

  if (!is_object($node) && is_numeric($node))
    $node = node_load($node);
  
  if ($node->type == 'erpal_task') {
    //get the project of the task, because a task alsways has a project assigned
    $project_nid = $node->field_project_ref[LANGUAGE_NONE][0]['target_id'];
    return $project_nid; //tasks allways have a project
  }  
  elseif ($node->type == 'erpal_book') {
    $book_nid = $node->nid;
  }  
  elseif ($node->type == 'erpal_book_page') {
    $book_nid = $node->field_book_ref[LANGUAGE_NONE][0]['target_id'];    
  } 
  elseif ($node->type == 'erpal_project') {
    return $node->nid;
  }
  elseif ($node->type == 'erpal_timetracking') {
    $subject_nid = $node->field_timetracking_subject[LANGUAGE_NONE][0]['target_id'];
    $subject_node = node_load($subject_nid);
    return _erpal_projects_helper_has_project($subject_node);
  }
  else
    return false;

  //now check if there is a project referencing this node
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'erpal_project')
  ->fieldCondition('field_books_ref', 'target_id', $book_nid, '=');

  $result = $query->execute();
  if (isset($result['node']) && count($result['node']) > 0) {
    $nids = array_keys($result['node']);
    return $nids[0];
  }
  
  return false;
}

/**
* Validates that the given book node is only referenced by one project
* @param $ignore_nids are project nids that are ignored, even if they reference the given book
*/
function _erpal_projects_helper_book_multiple_referenced_by_project_validate($book_nid, $ignore_nids=array()) {
  $project_nids = _erpal_project_helper_get_referencing_projects_by_book($book_nid);
  
  $nids = array();
  
  if (is_array($project_nids)) {
    foreach ($project_nids as $nid) {
      if (!in_array($nid, $ignore_nids))
        $nids[] = $nid;
    }
  }
  
  return $nids;
}

/**
* returns the project nids that reference the given book
*/
function _erpal_project_helper_get_referencing_projects_by_book($book_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'erpal_project')
  ->fieldCondition('field_books_ref', 'target_id', $book_nid, '=')
  ->addMetaData('account', user_load(1)); // run the query as user 1

  $result = $query->execute();

  if (isset($result['node'])) {
    $project_nids = array_keys($result['node']);
    return $project_nids;
  }
}

/**
* Implements hook_node_view_post provided by post_hooks module
*/
function erpal_projects_helper_node_view_post($node) {
  if (is_object($node)) {    
    if ($node->type == 'erpal_project') {      
      unset($node->content['links']['nodereference_url']['#links']['erpal_book_page_field_parent']);
      unset($node->content['links']['nodereference_url']['#links']['erpal_task_field_parent']);
    }
    
    if ($node->type == 'erpal_task') {
      unset($node->content['links']['nodereference_url']['#links']['erpal_book_page_field_parent']);
    }
    
    if ($node->type == 'erpal_book') {
      unset($node->content['links']['nodereference_url']['#links']['erpal_task_field_parent']);          
    }
  }
}

/**
* Renders a html output to show where a book with the given nid is rendered (at which projects)
* This function is called by the custom content field "used in projects" used in the book node panel
*/
function _erpal_projects_helper_render_projects_referencing_books($book_nid) {
  $projects = _erpal_project_helper_get_referencing_projects_by_book($book_nid);
  $projects_nodes = node_load_multiple($projects);
  $links = '';
  foreach ($projects_nodes as $nid=>$project_node) {
    $links .= "<div class='book_usage'>".l($project_node->title, 'node/'.$project_node->nid)."</div>";
  }
  return $links;
}


/**
* Implements hook_node_presave
*/
function erpal_projects_helper_node_presave($node) {
  $type = $node->type;
 
  if ($type == 'erpal_timetracking') {
    erpal_projects_helper_node_presave_timetracking($node);
  }

  if ($type == 'erpal_task') {    
    erpal_projects_helper_node_presave_task($node);       
  }
  
  if ($type == 'erpal_project') {    
    erpal_projects_helper_node_presave_project($node);        
  }
}


/**
* Returns all projects visible for the user
*/
function _erpal_projects_helper_get_projects() {
  $projects = array();
  
  //first get all book pages
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'erpal_project')
  ->propertyCondition('status', 1)
  //->propertyOrderBy('title', 'asc') //order alphabetic
  ->execute();
  
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $projects = erpal_lib_helper_node_titles($nids);
  }
  
  return $projects;
}

/**
* returns the activity to a given node if the node is a erpal_task or erpal_project
*/
function _erpal_projects_helper_get_activity($node) {
  if ($node->type == 'erpal_task')
    return _erpal_projects_helper_get_activity_by_task($node);
  if ($node->type == 'erpal_project')
    return _erpal_projects_helper_get_activity_by_project($node);
  
}

/**
* Checks if a task or a project could be delete
* @param $node the node that is check to be deleted
* @param $check_children if true the children of the node will be checked, too
* @param $messages array with messages that will be returned
*/
function _erpal_projects_helper_can_delete($node, $check_children, &$messages) {
  //if tasks or projects have budgets assigned, they cannot be delete.
  if ($node->type != 'erpal_project' && $node->type != 'erpal_task')
    return true;
  
  $all_task_nids = array();
  if ($check_children) {
    if ($node->type == 'erpal_project') {
      $all_task_nids = _erpal_projects_helper_get_tasks_by_project($node->nid);
    }elseif ($node->type == 'erpal_task') {
      $all_task_nids = _erpal_basic_helper_get_all_child_nids_deep_search($node->nid, array('erpal_task'));
    }
  }
  
  //add the node that will be deleted, we have to check it, too
  $all_task_nids[] = $node->nid;
  
  //check if children have budgets assigned, than it cannot be deleted
  $found_budget = false;
  foreach ($all_task_nids as $nid) {

    if (is_array($nid) && isset($nid['child']) && $nid['child']) {
      $nid = $nid['child'];
    }

    $a_node = node_load($nid);
    $pricing_id = $a_node->field_pricing[LANGUAGE_NONE][0]['value'];
    $pricing_entity = entity_load('field_collection_item', array($pricing_id));
    $pricing_entity = $pricing_entity[$pricing_id];  

    if (isset($pricing_entity->field_budgets[LANGUAGE_NONE]) && count($pricing_entity->field_budgets[LANGUAGE_NONE]) > 0) {
      $node_link = l($a_node->title, 'node/'.$a_node->nid);
      $messages[] = t('The node !node_link has budgets assigned.', array('!node_link' => $node_link));
      $found_budget = true;
    }    
  }
  
  if ($found_budget) {
    return false;
  }

  return true;
}

/**
* Returns the term ID of a category from the given node. If the given node has no category set, we check for a category in the parent tree
*/
function _erpal_projects_helper_get_project_category($node, $process_tree) {
  $category_node = _erpal_projects_node_with_value_in_tree($node, '_erpal_projects_helper_node_has_category', $process_tree); 
  
  $tid = _erpal_projects_helper_node_has_category($category_node);
  
  return $tid;
}

/**
* Callback for function @see _erpal_projects_node_with_value_in_tree in @see _erpal_projects_helper_get_project_category
* We check if the node has a project_category tag set
* @return if there is a category set, return the term id, otherwise false
*/
function _erpal_projects_helper_node_has_category($node) {
  $tid = isset($node->field_project_tags[LANGUAGE_NONE][0]['tid']) ? $node->field_project_tags[LANGUAGE_NONE][0]['tid'] : false;
  
  return $tid;
}

/**
* Returns a nid in the parent tree of a project if it has a value compared with $op in the parent set at the given field
* @param $process_tree if true, no only the given $node will be processed but all of its parents.
* @param $node the node where to start processing
* @param $compare_callback a name of a function that is called to check if the node matches and should be returned
*/
function _erpal_projects_node_with_value_in_tree($node, $compare_callback, $process_tree) {  
  
  if (!$node)
    return false; //no node
  
  if (function_exists($compare_callback))
    $value_match = call_user_func($compare_callback, $node);
  else
    return $node; //no compare function given, so return the node
  
  if ($value_match)
    return $node;
  
  //did not match so start recursion if we should
  
  if (!$process_tree) {    
    return false;
  }
  
  $parent_node = _erpal_project_task_parent($node);
  
  return _erpal_projects_node_with_value_in_tree($parent_node, $compare_callback, $process_tree);
}

/**
* Function returns true if the current logged in user is allowed to access tasks or tickets view in a project
* @param $type may be 'task' or 'ticket'
*/
function _erpal_projects_helper_user_can_access_page($type, $contexts) {
  $logged_in_user = $contexts['logged-in-user']->data;
  $project_node = $contexts['argument_entity_id:node_1']->data;
  
  module_load_include('inc', 'erpal_projects_helper', 'inc/projects');
  $team = _erpal_projects_helper_get_project_team_uids($project_node);
  
  if ($type == 'tasks') {
   
    if (user_access('bypass tasks view access', $logged_in_user)) 
      return true;
    
    foreach ($team as $team_arr) {
      $uid = $team_arr['uid'];
      $permissions = $team_arr['permissions'];
      if ($uid == $logged_in_user->uid) {
        if (in_array('view_tasks_list', $permissions))
          return true;
      }
    }
  }

  if ($type == 'tickets') {

    if (user_access('bypass tickets view access', $logged_in_user)) 
      return true;
  
    foreach ($team as $team_arr) {
      $uid = $team_arr['uid'];
      $permissions = $team_arr['permissions'];
      if ($uid == $logged_in_user->uid) {
        if (in_array('view_tickets_list', $permissions))
          return true;
      }
    }
  }
  
  return false;
}

/**
* Function is called by php field in budget view (view module not budget view page) to show the node where the budget is used at
*/
function _erpal_projects_helper_budget_view_subject($budget_id) {
  module_load_include('inc', 'erpal_projects_helper', 'inc/budget');
  $nid = _erpal_projects_helper_get_node_by_budget($budget_id, true);
  $titles = erpal_lib_helper_node_titles(array($nid));
  $title = isset($titles[$nid]) ? $titles[$nid] : false;
  return l($title, 'node/'.$nid);
}

/**
* Function is called by php field in budget view (view module not budget view page) to show the project of the node the budget is used at
*/
function _erpal_projects_helper_budget_view_project($budget_id) {
  module_load_include('inc', 'erpal_projects_helper', 'inc/budget');
  $nid = _erpal_projects_helper_get_node_by_budget($budget_id, true);
  if (!$nid)
    return false;
  $project_nid = _erpal_projects_helper_has_project($nid);
  $titles = erpal_lib_helper_node_titles(array($project_nid));
  $title = isset($titles[$project_nid]) ? $titles[$project_nid] : false;
  
  return l($title, 'node/'.$nid);
}
