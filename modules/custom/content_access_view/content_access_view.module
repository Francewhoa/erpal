<?php

/**
 * Implements hook_permission().
 */
function content_access_view_permission() {
  // Add permissions "view own" and "view any" per each node content type
  $permissions = _content_access_view_permissions_list();
  return $permissions;
}

function content_access_view_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_admin_permissions':
      $form['#submit'][] = 'content_access_view_user_admin_perm_submit';
      break;
    case 'content_access_admin_settings':
      $form['#submit'][] = 'content_access_view_add_permissions_submit';
      break;
  }
}

/**
 * Prepare permissions list for "view own" and "view any" per each node content 
 * type
 */
function _content_access_view_permissions_list() {
  $permissions = array();

  foreach (node_type_get_types() as $type => $info) {
    $permissions += array(
      "view own $type content" => array(
        'title' => t('%type_name: View own content', array('%type_name' => $info->name)),
      ),
      "view any $type content" => array(
        'title' => t('%type_name: View any content', array('%type_name' => $info->name)),
      ),
    );
  }

  return $permissions;
}

function content_access_view_add_permissions_submit($form, $form_state) {
  $roles_permissions = user_role_permissions(user_roles());
  $permissions = user_permission_get_modules();

  // Remove disabled modules permissions, so they can't raise exception
  // in content_access_save_permissions()
  foreach ($roles_permissions as $rid => $role_permissions) {
    foreach ($role_permissions as $permission => $value) {
      if (!array_key_exists($permission, $permissions)) {
        unset($roles_permissions[$rid][$permission]);
      }
    }
  }

  foreach (array('view', 'view_own') as $op) {
    foreach ($form_state['values'][$op] as $rid => $value) {
      $permission = _content_access_view_get_permission_by_op($op, $form_state['type']);
      if ($value) {
        $roles_permissions[$rid][$permission] = TRUE;
      } else {
        $roles_permissions[$rid][$permission] = FALSE;
      }
    }
  }

  content_access_save_permissions($roles_permissions);
}

/**
 * Gets the name of a permission for the given operation, if there is a suiting one.
 */
function _content_access_view_get_permission_by_op($op, $type) {
  switch ($op) {
    default:
      return FALSE;
    case 'view':
      return 'view any ' . $type . ' content';
    case 'view_own':
      return 'view own ' . $type . ' content';
  }
}

/**
 * Saves view permissions at permissins administration page
 */
function content_access_view_user_admin_perm_submit($form, $form_state) {
  $node_names = array_keys(node_type_get_types());
  
  // Prepare regular expressions
  $node_types = implode('|', $node_names);
  $match_expression = '/^view (own|any) (' . $node_types . ') content$/';
  $replace_expresssion = '/^view (own|any) | content$/';

  // Prepare content access permission settings array
  $settings = content_access_get_settings();

  // Get non admin roles and unset them
  _content_access_view_leave_admin_permissions($settings, 'view');
  _content_access_view_leave_admin_permissions($settings, 'view_own');

  // Get all values of "view own" and "view any" permissions values per each 
  // node content type
  $node_types_updated = array();
  
  foreach ($form_state['values']['role_names'] as $rid => $name) {
    foreach ($form_state['values'][$rid] as $key => $value) {
      if ($value) {
        // get node view permissions
        if (preg_match($match_expression, $key)) {
          
          $node_type = preg_replace($replace_expresssion, '', $key);
          
          // "view any ..." permissions
          if (strpos($key, 'any')) {
            $settings['view'][$node_type][] = $rid;
          } else
          // "view own ..." permissions
          if (strpos($key, 'own')) {
            $settings['view_own'][$node_type][] = $rid;
          }
          
          // Collect updates node types
          $node_types_updated[$node_type] = $node_type;
        }
      }
    }
  }

  // Update content access settings
  content_access_set_settings($settings);
  
  // Update content access permissions
  if (!empty($node_names)) {
    module_load_include('inc', 'content_access', 'content_access.admin');
    foreach ($node_names as $node_type_updated) {
      content_access_mass_update(array($node_type_updated));
    }
  }
}

function _content_access_view_leave_admin_permissions(&$settings, $permission_type) {
  // Get admin roles
  $admin_roles = content_access_get_permission_access('administer nodes');

  foreach ($settings[$permission_type] as $node_type_access_key => $node_type_access) {
    // Get non admin roles and unset them
    $not_admin_roles = array_diff($node_type_access, $admin_roles);
    if (!empty($not_admin_roles)) {
      foreach ($not_admin_roles as $not_admin_role_key => $not_admin_role) {
        unset($settings[$permission_type][$node_type_access_key][$not_admin_role_key]);
      }
    }
  }
}